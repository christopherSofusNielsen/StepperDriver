
DriverAndMsgTest_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  00000bfe  00000c92  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bfe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000408  0080022e  0080022e  00000cc0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d1c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000017ce  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f98  00000000  00000000  00002662  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a05  00000000  00000000  000035fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00004000  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000778  00000000  00000000  00004374  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000093f  00000000  00000000  00004aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000542b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	3e c1       	rjmp	.+636    	; 0x2c2 <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	89 c2       	rjmp	.+1298   	; 0x578 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee ef       	ldi	r30, 0xFE	; 254
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 32       	cpi	r26, 0x2E	; 46
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	26 e0       	ldi	r18, 0x06	; 6
 110:	ae e2       	ldi	r26, 0x2E	; 46
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a6 33       	cpi	r26, 0x36	; 54
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	31 d0       	rcall	.+98     	; 0x182 <main>
 120:	6c c5       	rjmp	.+2776   	; 0xbfa <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <getAction>:
			
		}
    }
}

void getAction(char command[], char payload[]){
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	e2 97       	sbiw	r28, 0x32	; 50
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
 144:	7c 01       	movw	r14, r24
 146:	6b 01       	movw	r12, r22
	char msg[50]={'\0'};
 148:	8e 01       	movw	r16, r28
 14a:	0f 5f       	subi	r16, 0xFF	; 255
 14c:	1f 4f       	sbci	r17, 0xFF	; 255
 14e:	82 e3       	ldi	r24, 0x32	; 50
 150:	f8 01       	movw	r30, r16
 152:	11 92       	st	Z+, r1
 154:	8a 95       	dec	r24
 156:	e9 f7       	brne	.-6      	; 0x152 <getAction+0x2e>
	getMsg(msg);
 158:	c8 01       	movw	r24, r16
 15a:	77 d1       	rcall	.+750    	; 0x44a <getMsg>
	parseMsg(msg, command, payload);
 15c:	a6 01       	movw	r20, r12
 15e:	b7 01       	movw	r22, r14
 160:	c8 01       	movw	r24, r16
 162:	b3 d1       	rcall	.+870    	; 0x4ca <parseMsg>
}
 164:	e2 96       	adiw	r28, 0x32	; 50
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	08 95       	ret

00000182 <main>:




int main(void)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	e2 97       	sbiw	r28, 0x32	; 50
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
    //Initialize
	initUART();
 196:	de d0       	rcall	.+444    	; 0x354 <initUART>
	initStepperT1();
 198:	54 d0       	rcall	.+168    	; 0x242 <initStepperT1>
 19a:	78 94       	sei
	sei();
 19c:	0f 2e       	mov	r0, r31
	
    while (1) 
    {
		if (newMsgAv())
		{
			char command[20]={'\0'};
 19e:	f4 e1       	ldi	r31, 0x14	; 20
 1a0:	cf 2e       	mov	r12, r31
 1a2:	f0 2d       	mov	r31, r0
 1a4:	8e 01       	movw	r16, r28
 1a6:	01 5e       	subi	r16, 0xE1	; 225
 1a8:	1f 4f       	sbci	r17, 0xFF	; 255
 1aa:	0f 2e       	mov	r0, r31
			char payload[30]={'\0'};
 1ac:	fe e1       	ldi	r31, 0x1E	; 30
 1ae:	df 2e       	mov	r13, r31
 1b0:	f0 2d       	mov	r31, r0
 1b2:	ce 01       	movw	r24, r28
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	7c 01       	movw	r14, r24
	sei();
	
	
    while (1) 
    {
		if (newMsgAv())
 1b8:	81 d1       	rcall	.+770    	; 0x4bc <newMsgAv>
 1ba:	88 23       	and	r24, r24
 1bc:	e9 f3       	breq	.-6      	; 0x1b8 <main+0x36>
 1be:	f8 01       	movw	r30, r16
		{
			char command[20]={'\0'};
 1c0:	8c 2d       	mov	r24, r12
 1c2:	11 92       	st	Z+, r1
 1c4:	8a 95       	dec	r24
 1c6:	e9 f7       	brne	.-6      	; 0x1c2 <main+0x40>
 1c8:	f7 01       	movw	r30, r14
			char payload[30]={'\0'};
 1ca:	8d 2d       	mov	r24, r13
 1cc:	11 92       	st	Z+, r1
 1ce:	8a 95       	dec	r24
 1d0:	e9 f7       	brne	.-6      	; 0x1cc <main+0x4a>
			getAction(command, payload);	
 1d2:	b7 01       	movw	r22, r14
 1d4:	c8 01       	movw	r24, r16
 1d6:	a6 df       	rcall	.-180    	; 0x124 <getAction>
			
			if (strcmp(command, "vel")==0)
 1d8:	63 e0       	ldi	r22, 0x03	; 3
 1da:	72 e0       	ldi	r23, 0x02	; 2
 1dc:	c8 01       	movw	r24, r16
 1de:	21 d2       	rcall	.+1090   	; 0x622 <strcmp>
 1e0:	89 2b       	or	r24, r25
			{
				unsigned int val=stringToUInt(payload);
 1e2:	39 f4       	brne	.+14     	; 0x1f2 <main+0x70>
 1e4:	c7 01       	movw	r24, r14
 1e6:	b4 d0       	rcall	.+360    	; 0x350 <stringToUInt>
				setVelocityT1(val);
 1e8:	5c 01       	movw	r10, r24
				sendUInt(val);
 1ea:	46 d0       	rcall	.+140    	; 0x278 <setVelocityT1>
 1ec:	c5 01       	movw	r24, r10
 1ee:	01 d1       	rcall	.+514    	; 0x3f2 <sendUInt>
			}
			else if (strcmp(command, "start")==0)
 1f0:	e3 cf       	rjmp	.-58     	; 0x1b8 <main+0x36>
 1f2:	67 e0       	ldi	r22, 0x07	; 7
 1f4:	72 e0       	ldi	r23, 0x02	; 2
 1f6:	c8 01       	movw	r24, r16
 1f8:	14 d2       	rcall	.+1064   	; 0x622 <strcmp>
 1fa:	89 2b       	or	r24, r25
			{
				unsigned int steps=stringToUInt(payload);
 1fc:	99 f4       	brne	.+38     	; 0x224 <main+0xa2>
 1fe:	c7 01       	movw	r24, r14
 200:	a7 d0       	rcall	.+334    	; 0x350 <stringToUInt>
				
				sendUInt((unsigned int)running);
 202:	5c 01       	movw	r10, r24
 204:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <running>
 208:	90 e0       	ldi	r25, 0x00	; 0
				startT1(steps);
 20a:	f3 d0       	rcall	.+486    	; 0x3f2 <sendUInt>
 20c:	b5 01       	movw	r22, r10
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	90 e0       	ldi	r25, 0x00	; 0
				sendMsg("started");
 212:	3b d0       	rcall	.+118    	; 0x28a <startT1>
 214:	8d e0       	ldi	r24, 0x0D	; 13
 216:	92 e0       	ldi	r25, 0x02	; 2
				sendUInt((unsigned int)running);
 218:	e2 d0       	rcall	.+452    	; 0x3de <sendMsg>
 21a:	80 91 32 02 	lds	r24, 0x0232	; 0x800232 <running>
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	e8 d0       	rcall	.+464    	; 0x3f2 <sendUInt>
				
			}
			else if (strcmp(command, "stop")==0)
 222:	ca cf       	rjmp	.-108    	; 0x1b8 <main+0x36>
 224:	65 e1       	ldi	r22, 0x15	; 21
 226:	72 e0       	ldi	r23, 0x02	; 2
 228:	c8 01       	movw	r24, r16
 22a:	fb d1       	rcall	.+1014   	; 0x622 <strcmp>
 22c:	89 2b       	or	r24, r25
 22e:	29 f4       	brne	.+10     	; 0x23a <main+0xb8>
			{
				stopAndClearT1();
 230:	3f d0       	rcall	.+126    	; 0x2b0 <stopAndClearT1>
 232:	8a e1       	ldi	r24, 0x1A	; 26
				sendMsg("stopped");
 234:	92 e0       	ldi	r25, 0x02	; 2
 236:	d3 d0       	rcall	.+422    	; 0x3de <sendMsg>
 238:	bf cf       	rjmp	.-130    	; 0x1b8 <main+0x36>
 23a:	82 e2       	ldi	r24, 0x22	; 34
 23c:	92 e0       	ldi	r25, 0x02	; 2
			}
			else{
				sendMsg("ERROR");
 23e:	cf d0       	rcall	.+414    	; 0x3de <sendMsg>
 240:	bb cf       	rjmp	.-138    	; 0x1b8 <main+0x36>

00000242 <initStepperT1>:
 242:	e0 e8       	ldi	r30, 0x80	; 128
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
void setVelocityT1(unsigned int vel){
	compareValueT1=vel;
	OCR1A = compareValueT1;
}

void setPrescaleT1(uint8_t scale){
 248:	80 64       	ori	r24, 0x40	; 64
 24a:	80 83       	st	Z, r24
 24c:	e1 e8       	ldi	r30, 0x81	; 129
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	80 81       	ld	r24, Z
 252:	88 60       	ori	r24, 0x08	; 8
 254:	80 83       	st	Z, r24
 256:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 25a:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 25e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 262:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 266:	ef e6       	ldi	r30, 0x6F	; 111
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	82 60       	ori	r24, 0x02	; 2
 26e:	80 83       	st	Z, r24
 270:	25 9a       	sbi	0x04, 5	; 4
 272:	2d 98       	cbi	0x05, 5	; 5
 274:	78 94       	sei
 276:	08 95       	ret

00000278 <setVelocityT1>:
 278:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 27c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 280:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 284:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 288:	08 95       	ret

0000028a <startT1>:
	
}

void startT1(long int steps){
	stepsToGo=steps;
 28a:	60 93 2e 02 	sts	0x022E, r22	; 0x80022e <__data_end>
 28e:	70 93 2f 02 	sts	0x022F, r23	; 0x80022f <__data_end+0x1>
 292:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <__data_end+0x2>
 296:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <__data_end+0x3>
	running=1;
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <running>
	TCCR1B |= prescaleT1;
 2a0:	e1 e8       	ldi	r30, 0x81	; 129
 2a2:	f0 e0       	ldi	r31, 0x00	; 0
 2a4:	90 81       	ld	r25, Z
 2a6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <prescaleT1>
 2aa:	89 2b       	or	r24, r25
 2ac:	80 83       	st	Z, r24
 2ae:	08 95       	ret

000002b0 <stopAndClearT1>:
}

void stopAndClearT1(){
	TCCR1B &= ~0x07;
 2b0:	e1 e8       	ldi	r30, 0x81	; 129
 2b2:	f0 e0       	ldi	r31, 0x00	; 0
 2b4:	80 81       	ld	r24, Z
 2b6:	88 7f       	andi	r24, 0xF8	; 248
 2b8:	80 83       	st	Z, r24
	PORTB &= ~(1<<PB5); //make sure port is low
 2ba:	2d 98       	cbi	0x05, 5	; 5
	running=0;
 2bc:	10 92 32 02 	sts	0x0232, r1	; 0x800232 <running>
 2c0:	08 95       	ret

000002c2 <__vector_17>:
	
}

ISR(TIMER1_COMPA_vect){
 2c2:	1f 92       	push	r1
 2c4:	0f 92       	push	r0
 2c6:	0f b6       	in	r0, 0x3f	; 63
 2c8:	0f 92       	push	r0
 2ca:	11 24       	eor	r1, r1
 2cc:	0b b6       	in	r0, 0x3b	; 59
 2ce:	0f 92       	push	r0
 2d0:	2f 93       	push	r18
 2d2:	3f 93       	push	r19
 2d4:	4f 93       	push	r20
 2d6:	5f 93       	push	r21
 2d8:	6f 93       	push	r22
 2da:	7f 93       	push	r23
 2dc:	8f 93       	push	r24
 2de:	9f 93       	push	r25
 2e0:	af 93       	push	r26
 2e2:	bf 93       	push	r27
 2e4:	ef 93       	push	r30
 2e6:	ff 93       	push	r31
	if (stepsToGo<=0)
 2e8:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
 2ec:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <__data_end+0x1>
 2f0:	a0 91 30 02 	lds	r26, 0x0230	; 0x800230 <__data_end+0x2>
 2f4:	b0 91 31 02 	lds	r27, 0x0231	; 0x800231 <__data_end+0x3>
 2f8:	18 16       	cp	r1, r24
 2fa:	19 06       	cpc	r1, r25
 2fc:	1a 06       	cpc	r1, r26
 2fe:	1b 06       	cpc	r1, r27
 300:	0c f0       	brlt	.+2      	; 0x304 <__vector_17+0x42>
	{
		stopAndClearT1();
 302:	d6 df       	rcall	.-84     	; 0x2b0 <stopAndClearT1>
	}
	stepsToGo--;
 304:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
 308:	90 91 2f 02 	lds	r25, 0x022F	; 0x80022f <__data_end+0x1>
 30c:	a0 91 30 02 	lds	r26, 0x0230	; 0x800230 <__data_end+0x2>
 310:	b0 91 31 02 	lds	r27, 0x0231	; 0x800231 <__data_end+0x3>
 314:	01 97       	sbiw	r24, 0x01	; 1
 316:	a1 09       	sbc	r26, r1
 318:	b1 09       	sbc	r27, r1
 31a:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
 31e:	90 93 2f 02 	sts	0x022F, r25	; 0x80022f <__data_end+0x1>
 322:	a0 93 30 02 	sts	0x0230, r26	; 0x800230 <__data_end+0x2>
 326:	b0 93 31 02 	sts	0x0231, r27	; 0x800231 <__data_end+0x3>
}
 32a:	ff 91       	pop	r31
 32c:	ef 91       	pop	r30
 32e:	bf 91       	pop	r27
 330:	af 91       	pop	r26
 332:	9f 91       	pop	r25
 334:	8f 91       	pop	r24
 336:	7f 91       	pop	r23
 338:	6f 91       	pop	r22
 33a:	5f 91       	pop	r21
 33c:	4f 91       	pop	r20
 33e:	3f 91       	pop	r19
 340:	2f 91       	pop	r18
 342:	0f 90       	pop	r0
 344:	0b be       	out	0x3b, r0	; 59
 346:	0f 90       	pop	r0
 348:	0f be       	out	0x3f, r0	; 63
 34a:	0f 90       	pop	r0
 34c:	1f 90       	pop	r1
 34e:	18 95       	reti

00000350 <stringToUInt>:

/************************************************************************/
/* String to unsigned int                                               */
/************************************************************************/
unsigned int stringToUInt(char str[]){
	return atoi(str);
 350:	43 c1       	rjmp	.+646    	; 0x5d8 <atoi>
 352:	08 95       	ret

00000354 <initUART>:
	char _msg[200]={'\0'};
	strcat(_msg, msg);
	strcat(_msg, "\t");
	strcat(_msg, xStr);
	sendMsg(_msg);
}
 354:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 358:	87 e6       	ldi	r24, 0x67	; 103
 35a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 35e:	82 e0       	ldi	r24, 0x02	; 2
 360:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 364:	86 e0       	ldi	r24, 0x06	; 6
 366:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 36a:	e1 ec       	ldi	r30, 0xC1	; 193
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	88 61       	ori	r24, 0x18	; 24
 372:	80 83       	st	Z, r24
 374:	80 81       	ld	r24, Z
 376:	80 68       	ori	r24, 0x80	; 128
 378:	80 83       	st	Z, r24
 37a:	78 94       	sei
 37c:	08 95       	ret

0000037e <writeBytes>:
 37e:	0f 93       	push	r16
 380:	1f 93       	push	r17
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
 386:	8c 01       	movw	r16, r24
 388:	16 16       	cp	r1, r22
 38a:	17 06       	cpc	r1, r23
 38c:	9c f4       	brge	.+38     	; 0x3b4 <writeBytes+0x36>
 38e:	20 e0       	ldi	r18, 0x00	; 0
 390:	e0 ec       	ldi	r30, 0xC0	; 192
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	c6 ec       	ldi	r28, 0xC6	; 198
 396:	d0 e0       	ldi	r29, 0x00	; 0
 398:	90 81       	ld	r25, Z
 39a:	95 ff       	sbrs	r25, 5
 39c:	fd cf       	rjmp	.-6      	; 0x398 <writeBytes+0x1a>
 39e:	d8 01       	movw	r26, r16
 3a0:	a2 0f       	add	r26, r18
 3a2:	b1 1d       	adc	r27, r1
 3a4:	9c 91       	ld	r25, X
 3a6:	98 83       	st	Y, r25
 3a8:	2f 5f       	subi	r18, 0xFF	; 255
 3aa:	42 2f       	mov	r20, r18
 3ac:	50 e0       	ldi	r21, 0x00	; 0
 3ae:	46 17       	cp	r20, r22
 3b0:	57 07       	cpc	r21, r23
 3b2:	94 f3       	brlt	.-28     	; 0x398 <writeBytes+0x1a>
 3b4:	e0 ec       	ldi	r30, 0xC0	; 192
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	85 ff       	sbrs	r24, 5
 3bc:	fd cf       	rjmp	.-6      	; 0x3b8 <writeBytes+0x3a>
 3be:	8d e0       	ldi	r24, 0x0D	; 13
 3c0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 3c4:	e0 ec       	ldi	r30, 0xC0	; 192
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	80 81       	ld	r24, Z
 3ca:	85 ff       	sbrs	r24, 5
 3cc:	fd cf       	rjmp	.-6      	; 0x3c8 <writeBytes+0x4a>
 3ce:	8a e0       	ldi	r24, 0x0A	; 10
 3d0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 3d4:	df 91       	pop	r29
 3d6:	cf 91       	pop	r28
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	08 95       	ret

000003de <sendMsg>:
 3de:	fc 01       	movw	r30, r24
 3e0:	01 90       	ld	r0, Z+
 3e2:	00 20       	and	r0, r0
 3e4:	e9 f7       	brne	.-6      	; 0x3e0 <sendMsg+0x2>
 3e6:	31 97       	sbiw	r30, 0x01	; 1
 3e8:	bf 01       	movw	r22, r30
 3ea:	68 1b       	sub	r22, r24
 3ec:	79 0b       	sbc	r23, r25
 3ee:	c7 cf       	rjmp	.-114    	; 0x37e <writeBytes>
 3f0:	08 95       	ret

000003f2 <sendUInt>:
 3f2:	0f 93       	push	r16
 3f4:	1f 93       	push	r17
 3f6:	cf 93       	push	r28
 3f8:	df 93       	push	r29
 3fa:	00 d0       	rcall	.+0      	; 0x3fc <sendUInt+0xa>
 3fc:	00 d0       	rcall	.+0      	; 0x3fe <sendUInt+0xc>
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	8e 01       	movw	r16, r28
 404:	0f 5f       	subi	r16, 0xFF	; 255
 406:	1f 4f       	sbci	r17, 0xFF	; 255
 408:	26 e0       	ldi	r18, 0x06	; 6
 40a:	f8 01       	movw	r30, r16
 40c:	11 92       	st	Z+, r1
 40e:	2a 95       	dec	r18
 410:	e9 f7       	brne	.-6      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 412:	9f 93       	push	r25
 414:	8f 93       	push	r24
 416:	8b e2       	ldi	r24, 0x2B	; 43
 418:	92 e0       	ldi	r25, 0x02	; 2
 41a:	9f 93       	push	r25
 41c:	8f 93       	push	r24
 41e:	1f 93       	push	r17
 420:	0f 93       	push	r16
 422:	10 d1       	rcall	.+544    	; 0x644 <sprintf>
 424:	c8 01       	movw	r24, r16
 426:	db df       	rcall	.-74     	; 0x3de <sendMsg>
 428:	0f 90       	pop	r0
 42a:	0f 90       	pop	r0
 42c:	0f 90       	pop	r0
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	26 96       	adiw	r28, 0x06	; 6
 436:	0f b6       	in	r0, 0x3f	; 63
 438:	f8 94       	cli
 43a:	de bf       	out	0x3e, r29	; 62
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	cd bf       	out	0x3d, r28	; 61
 440:	df 91       	pop	r29
 442:	cf 91       	pop	r28
 444:	1f 91       	pop	r17
 446:	0f 91       	pop	r16
 448:	08 95       	ret

0000044a <getMsg>:


//returns the oldest message in the buffer
void getMsg(char msg[]){
 44a:	ac 01       	movw	r20, r24
	//there must be at least one message aviable
	if(newMessage>0){
 44c:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <newMessage>
 450:	88 23       	and	r24, r24
 452:	99 f1       	breq	.+102    	; 0x4ba <getMsg+0x70>
		newMessage--;
 454:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <newMessage>
 458:	81 50       	subi	r24, 0x01	; 1
 45a:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <newMessage>
		uint8_t i=0;
		
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 45e:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <rxReadPos>
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	ea 5c       	subi	r30, 0xCA	; 202
 466:	fd 4f       	sbci	r31, 0xFD	; 253
 468:	80 81       	ld	r24, Z
 46a:	8d 30       	cpi	r24, 0x0D	; 13
 46c:	d1 f0       	breq	.+52     	; 0x4a2 <getMsg+0x58>
 46e:	90 e0       	ldi	r25, 0x00	; 0
			msg[i++]=rxBuffer[rxReadPos++];
 470:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <rxReadPos>
 474:	21 e0       	ldi	r18, 0x01	; 1
 476:	2e 0f       	add	r18, r30
 478:	20 93 35 02 	sts	0x0235, r18	; 0x800235 <rxReadPos>
 47c:	f0 e0       	ldi	r31, 0x00	; 0
 47e:	ea 5c       	subi	r30, 0xCA	; 202
 480:	fd 4f       	sbci	r31, 0xFD	; 253
 482:	20 81       	ld	r18, Z
 484:	fa 01       	movw	r30, r20
 486:	e9 0f       	add	r30, r25
 488:	f1 1d       	adc	r31, r1
 48a:	20 83       	st	Z, r18
			
			if(rxReadPos >= RX_BUFFER_SIZE)
 48c:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <rxReadPos>
	if(newMessage>0){
		newMessage--;
		uint8_t i=0;
		
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 490:	e0 91 35 02 	lds	r30, 0x0235	; 0x800235 <rxReadPos>
			msg[i++]=rxBuffer[rxReadPos++];
 494:	9f 5f       	subi	r25, 0xFF	; 255
	if(newMessage>0){
		newMessage--;
		uint8_t i=0;
		
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	ea 5c       	subi	r30, 0xCA	; 202
 49a:	fd 4f       	sbci	r31, 0xFD	; 253
 49c:	20 81       	ld	r18, Z
 49e:	2d 30       	cpi	r18, 0x0D	; 13
 4a0:	39 f7       	brne	.-50     	; 0x470 <getMsg+0x26>
			if(rxReadPos >= RX_BUFFER_SIZE)
			{
				rxReadPos = 0;
			}
		}
		rxReadPos++;
 4a2:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <rxReadPos>
 4a6:	8f 5f       	subi	r24, 0xFF	; 255
 4a8:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <rxReadPos>
		//if second endbyte is used, then move rxReadPos one forward
		if(USESECONDEDNBYTE){
			rxReadPos++;
 4ac:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <rxReadPos>
 4b0:	8f 5f       	subi	r24, 0xFF	; 255
 4b2:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <rxReadPos>
			if(rxReadPos >= RX_BUFFER_SIZE)
 4b6:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <rxReadPos>
 4ba:	08 95       	ret

000004bc <newMsgAv>:
		}
	}
}

uint8_t newMsgAv(){
	if(newMessage>0)
 4bc:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <newMessage>
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	91 11       	cpse	r25, r1
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <newMsgAv+0xc>
 4c6:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	else
		return 0;
}
 4c8:	08 95       	ret

000004ca <parseMsg>:


void parseMsg(char msg[], char command[], char payload[]){
 4ca:	bf 92       	push	r11
 4cc:	cf 92       	push	r12
 4ce:	df 92       	push	r13
 4d0:	ef 92       	push	r14
 4d2:	ff 92       	push	r15
 4d4:	0f 93       	push	r16
 4d6:	1f 93       	push	r17
 4d8:	cf 93       	push	r28
 4da:	df 93       	push	r29
 4dc:	8c 01       	movw	r16, r24
 4de:	6b 01       	movw	r12, r22
 4e0:	7a 01       	movw	r14, r20
	
	uint8_t cnt=0;
	uint8_t cntCom=0;
	uint8_t cntPay=0;
	char c=msg[cnt];
 4e2:	fc 01       	movw	r30, r24
 4e4:	80 81       	ld	r24, Z
	
	//first put each char from msg to command[] until the char is = or '\r'
	while(c!='=' && c!=FIRSTENDBYTE && c!='\0'){
 4e6:	8d 33       	cpi	r24, 0x3D	; 61
 4e8:	f1 f0       	breq	.+60     	; 0x526 <parseMsg+0x5c>
 4ea:	8d 30       	cpi	r24, 0x0D	; 13
 4ec:	f1 f0       	breq	.+60     	; 0x52a <parseMsg+0x60>
 4ee:	88 23       	and	r24, r24
 4f0:	f1 f0       	breq	.+60     	; 0x52e <parseMsg+0x64>
 4f2:	d0 e0       	ldi	r29, 0x00	; 0
 4f4:	c0 e0       	ldi	r28, 0x00	; 0
		if(c!='\b') //if char is '\b' then don't put in command
 4f6:	88 30       	cpi	r24, 0x08	; 8
 4f8:	51 f0       	breq	.+20     	; 0x50e <parseMsg+0x44>
			command[cntCom++]=tolower(c);//convert each char to lower case
 4fa:	bb 24       	eor	r11, r11
 4fc:	b3 94       	inc	r11
 4fe:	bd 0e       	add	r11, r29
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	87 d0       	rcall	.+270    	; 0x612 <tolower>
 504:	f6 01       	movw	r30, r12
 506:	ed 0f       	add	r30, r29
 508:	f1 1d       	adc	r31, r1
 50a:	80 83       	st	Z, r24
 50c:	db 2d       	mov	r29, r11
		c=msg[++cnt];
 50e:	cf 5f       	subi	r28, 0xFF	; 255
 510:	f8 01       	movw	r30, r16
 512:	ec 0f       	add	r30, r28
 514:	f1 1d       	adc	r31, r1
 516:	80 81       	ld	r24, Z
	uint8_t cntCom=0;
	uint8_t cntPay=0;
	char c=msg[cnt];
	
	//first put each char from msg to command[] until the char is = or '\r'
	while(c!='=' && c!=FIRSTENDBYTE && c!='\0'){
 518:	8d 33       	cpi	r24, 0x3D	; 61
 51a:	51 f0       	breq	.+20     	; 0x530 <parseMsg+0x66>
 51c:	8d 30       	cpi	r24, 0x0D	; 13
 51e:	41 f0       	breq	.+16     	; 0x530 <parseMsg+0x66>
 520:	81 11       	cpse	r24, r1
 522:	e9 cf       	rjmp	.-46     	; 0x4f6 <parseMsg+0x2c>
 524:	05 c0       	rjmp	.+10     	; 0x530 <parseMsg+0x66>
}


void parseMsg(char msg[], char command[], char payload[]){
	
	uint8_t cnt=0;
 526:	c0 e0       	ldi	r28, 0x00	; 0
 528:	03 c0       	rjmp	.+6      	; 0x530 <parseMsg+0x66>
 52a:	c0 e0       	ldi	r28, 0x00	; 0
 52c:	01 c0       	rjmp	.+2      	; 0x530 <parseMsg+0x66>
 52e:	c0 e0       	ldi	r28, 0x00	; 0
		if(c!='\b') //if char is '\b' then don't put in command
			command[cntCom++]=tolower(c);//convert each char to lower case
		c=msg[++cnt];
	}
	
	c=msg[++cnt];//if c is not '\r' or end of string char '\0' then put it in payload
 530:	cf 5f       	subi	r28, 0xFF	; 255
 532:	f8 01       	movw	r30, r16
 534:	ec 0f       	add	r30, r28
 536:	f1 1d       	adc	r31, r1
 538:	80 81       	ld	r24, Z
	while(c!=FIRSTENDBYTE && c!='\0'){
 53a:	8d 30       	cpi	r24, 0x0D	; 13
 53c:	99 f0       	breq	.+38     	; 0x564 <parseMsg+0x9a>
 53e:	88 23       	and	r24, r24
 540:	89 f0       	breq	.+34     	; 0x564 <parseMsg+0x9a>
 542:	90 e0       	ldi	r25, 0x00	; 0
		if(c!='\b')
 544:	88 30       	cpi	r24, 0x08	; 8
 546:	29 f0       	breq	.+10     	; 0x552 <parseMsg+0x88>
			payload[cntPay++]=c;
 548:	f7 01       	movw	r30, r14
 54a:	e9 0f       	add	r30, r25
 54c:	f1 1d       	adc	r31, r1
 54e:	80 83       	st	Z, r24
 550:	9f 5f       	subi	r25, 0xFF	; 255
		c=msg[++cnt];
 552:	cf 5f       	subi	r28, 0xFF	; 255
 554:	f8 01       	movw	r30, r16
 556:	ec 0f       	add	r30, r28
 558:	f1 1d       	adc	r31, r1
 55a:	80 81       	ld	r24, Z
			command[cntCom++]=tolower(c);//convert each char to lower case
		c=msg[++cnt];
	}
	
	c=msg[++cnt];//if c is not '\r' or end of string char '\0' then put it in payload
	while(c!=FIRSTENDBYTE && c!='\0'){
 55c:	8d 30       	cpi	r24, 0x0D	; 13
 55e:	11 f0       	breq	.+4      	; 0x564 <parseMsg+0x9a>
 560:	81 11       	cpse	r24, r1
 562:	f0 cf       	rjmp	.-32     	; 0x544 <parseMsg+0x7a>
		if(c!='\b')
			payload[cntPay++]=c;
		c=msg[++cnt];
	}
	
}
 564:	df 91       	pop	r29
 566:	cf 91       	pop	r28
 568:	1f 91       	pop	r17
 56a:	0f 91       	pop	r16
 56c:	ff 90       	pop	r15
 56e:	ef 90       	pop	r14
 570:	df 90       	pop	r13
 572:	cf 90       	pop	r12
 574:	bf 90       	pop	r11
 576:	08 95       	ret

00000578 <__vector_25>:


//lib
ISR(USART0_RX_vect){
 578:	1f 92       	push	r1
 57a:	0f 92       	push	r0
 57c:	0f b6       	in	r0, 0x3f	; 63
 57e:	0f 92       	push	r0
 580:	11 24       	eor	r1, r1
 582:	0b b6       	in	r0, 0x3b	; 59
 584:	0f 92       	push	r0
 586:	8f 93       	push	r24
 588:	ef 93       	push	r30
 58a:	ff 93       	push	r31
	rxBuffer[rxWritePos] = UDR0;
 58c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <rxWritePos>
 590:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	ea 5c       	subi	r30, 0xCA	; 202
 598:	fd 4f       	sbci	r31, 0xFD	; 253
 59a:	80 83       	st	Z, r24
	
	if(rxBuffer[rxWritePos]==FIRSTENDBYTE){
 59c:	e0 91 34 02 	lds	r30, 0x0234	; 0x800234 <rxWritePos>
 5a0:	f0 e0       	ldi	r31, 0x00	; 0
 5a2:	ea 5c       	subi	r30, 0xCA	; 202
 5a4:	fd 4f       	sbci	r31, 0xFD	; 253
 5a6:	80 81       	ld	r24, Z
 5a8:	8d 30       	cpi	r24, 0x0D	; 13
 5aa:	29 f4       	brne	.+10     	; 0x5b6 <__vector_25+0x3e>
		newMessage++;
 5ac:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <newMessage>
 5b0:	8f 5f       	subi	r24, 0xFF	; 255
 5b2:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <newMessage>
	}
	
	rxWritePos++;
 5b6:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <rxWritePos>
 5ba:	8f 5f       	subi	r24, 0xFF	; 255
 5bc:	80 93 34 02 	sts	0x0234, r24	; 0x800234 <rxWritePos>
	
	if(rxWritePos >= RX_BUFFER_SIZE)
 5c0:	80 91 34 02 	lds	r24, 0x0234	; 0x800234 <rxWritePos>
	{
		rxWritePos = 0;
	}
}
 5c4:	ff 91       	pop	r31
 5c6:	ef 91       	pop	r30
 5c8:	8f 91       	pop	r24
 5ca:	0f 90       	pop	r0
 5cc:	0b be       	out	0x3b, r0	; 59
 5ce:	0f 90       	pop	r0
 5d0:	0f be       	out	0x3f, r0	; 63
 5d2:	0f 90       	pop	r0
 5d4:	1f 90       	pop	r1
 5d6:	18 95       	reti

000005d8 <atoi>:
 5d8:	fc 01       	movw	r30, r24
 5da:	88 27       	eor	r24, r24
 5dc:	99 27       	eor	r25, r25
 5de:	e8 94       	clt
 5e0:	21 91       	ld	r18, Z+
 5e2:	20 32       	cpi	r18, 0x20	; 32
 5e4:	e9 f3       	breq	.-6      	; 0x5e0 <atoi+0x8>
 5e6:	29 30       	cpi	r18, 0x09	; 9
 5e8:	10 f0       	brcs	.+4      	; 0x5ee <atoi+0x16>
 5ea:	2e 30       	cpi	r18, 0x0E	; 14
 5ec:	c8 f3       	brcs	.-14     	; 0x5e0 <atoi+0x8>
 5ee:	2b 32       	cpi	r18, 0x2B	; 43
 5f0:	39 f0       	breq	.+14     	; 0x600 <atoi+0x28>
 5f2:	2d 32       	cpi	r18, 0x2D	; 45
 5f4:	31 f4       	brne	.+12     	; 0x602 <atoi+0x2a>
 5f6:	68 94       	set
 5f8:	03 c0       	rjmp	.+6      	; 0x600 <atoi+0x28>
 5fa:	1c d0       	rcall	.+56     	; 0x634 <__mulhi_const_10>
 5fc:	82 0f       	add	r24, r18
 5fe:	91 1d       	adc	r25, r1
 600:	21 91       	ld	r18, Z+
 602:	20 53       	subi	r18, 0x30	; 48
 604:	2a 30       	cpi	r18, 0x0A	; 10
 606:	c8 f3       	brcs	.-14     	; 0x5fa <atoi+0x22>
 608:	1e f4       	brtc	.+6      	; 0x610 <atoi+0x38>
 60a:	90 95       	com	r25
 60c:	81 95       	neg	r24
 60e:	9f 4f       	sbci	r25, 0xFF	; 255
 610:	08 95       	ret

00000612 <tolower>:
 612:	91 11       	cpse	r25, r1
 614:	08 95       	ret
 616:	81 54       	subi	r24, 0x41	; 65
 618:	8a 51       	subi	r24, 0x1A	; 26
 61a:	08 f4       	brcc	.+2      	; 0x61e <tolower+0xc>
 61c:	80 5e       	subi	r24, 0xE0	; 224
 61e:	85 5a       	subi	r24, 0xA5	; 165
 620:	08 95       	ret

00000622 <strcmp>:
 622:	fb 01       	movw	r30, r22
 624:	dc 01       	movw	r26, r24
 626:	8d 91       	ld	r24, X+
 628:	01 90       	ld	r0, Z+
 62a:	80 19       	sub	r24, r0
 62c:	01 10       	cpse	r0, r1
 62e:	d9 f3       	breq	.-10     	; 0x626 <strcmp+0x4>
 630:	99 0b       	sbc	r25, r25
 632:	08 95       	ret

00000634 <__mulhi_const_10>:
 634:	7a e0       	ldi	r23, 0x0A	; 10
 636:	97 9f       	mul	r25, r23
 638:	90 2d       	mov	r25, r0
 63a:	87 9f       	mul	r24, r23
 63c:	80 2d       	mov	r24, r0
 63e:	91 0d       	add	r25, r1
 640:	11 24       	eor	r1, r1
 642:	08 95       	ret

00000644 <sprintf>:
 644:	0f 93       	push	r16
 646:	1f 93       	push	r17
 648:	cf 93       	push	r28
 64a:	df 93       	push	r29
 64c:	cd b7       	in	r28, 0x3d	; 61
 64e:	de b7       	in	r29, 0x3e	; 62
 650:	2e 97       	sbiw	r28, 0x0e	; 14
 652:	0f b6       	in	r0, 0x3f	; 63
 654:	f8 94       	cli
 656:	de bf       	out	0x3e, r29	; 62
 658:	0f be       	out	0x3f, r0	; 63
 65a:	cd bf       	out	0x3d, r28	; 61
 65c:	0e 89       	ldd	r16, Y+22	; 0x16
 65e:	1f 89       	ldd	r17, Y+23	; 0x17
 660:	86 e0       	ldi	r24, 0x06	; 6
 662:	8c 83       	std	Y+4, r24	; 0x04
 664:	1a 83       	std	Y+2, r17	; 0x02
 666:	09 83       	std	Y+1, r16	; 0x01
 668:	8f ef       	ldi	r24, 0xFF	; 255
 66a:	9f e7       	ldi	r25, 0x7F	; 127
 66c:	9e 83       	std	Y+6, r25	; 0x06
 66e:	8d 83       	std	Y+5, r24	; 0x05
 670:	ae 01       	movw	r20, r28
 672:	46 5e       	subi	r20, 0xE6	; 230
 674:	5f 4f       	sbci	r21, 0xFF	; 255
 676:	68 8d       	ldd	r22, Y+24	; 0x18
 678:	79 8d       	ldd	r23, Y+25	; 0x19
 67a:	ce 01       	movw	r24, r28
 67c:	01 96       	adiw	r24, 0x01	; 1
 67e:	10 d0       	rcall	.+32     	; 0x6a0 <vfprintf>
 680:	ef 81       	ldd	r30, Y+7	; 0x07
 682:	f8 85       	ldd	r31, Y+8	; 0x08
 684:	e0 0f       	add	r30, r16
 686:	f1 1f       	adc	r31, r17
 688:	10 82       	st	Z, r1
 68a:	2e 96       	adiw	r28, 0x0e	; 14
 68c:	0f b6       	in	r0, 0x3f	; 63
 68e:	f8 94       	cli
 690:	de bf       	out	0x3e, r29	; 62
 692:	0f be       	out	0x3f, r0	; 63
 694:	cd bf       	out	0x3d, r28	; 61
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	1f 91       	pop	r17
 69c:	0f 91       	pop	r16
 69e:	08 95       	ret

000006a0 <vfprintf>:
 6a0:	2f 92       	push	r2
 6a2:	3f 92       	push	r3
 6a4:	4f 92       	push	r4
 6a6:	5f 92       	push	r5
 6a8:	6f 92       	push	r6
 6aa:	7f 92       	push	r7
 6ac:	8f 92       	push	r8
 6ae:	9f 92       	push	r9
 6b0:	af 92       	push	r10
 6b2:	bf 92       	push	r11
 6b4:	cf 92       	push	r12
 6b6:	df 92       	push	r13
 6b8:	ef 92       	push	r14
 6ba:	ff 92       	push	r15
 6bc:	0f 93       	push	r16
 6be:	1f 93       	push	r17
 6c0:	cf 93       	push	r28
 6c2:	df 93       	push	r29
 6c4:	cd b7       	in	r28, 0x3d	; 61
 6c6:	de b7       	in	r29, 0x3e	; 62
 6c8:	2b 97       	sbiw	r28, 0x0b	; 11
 6ca:	0f b6       	in	r0, 0x3f	; 63
 6cc:	f8 94       	cli
 6ce:	de bf       	out	0x3e, r29	; 62
 6d0:	0f be       	out	0x3f, r0	; 63
 6d2:	cd bf       	out	0x3d, r28	; 61
 6d4:	6c 01       	movw	r12, r24
 6d6:	7b 01       	movw	r14, r22
 6d8:	8a 01       	movw	r16, r20
 6da:	fc 01       	movw	r30, r24
 6dc:	17 82       	std	Z+7, r1	; 0x07
 6de:	16 82       	std	Z+6, r1	; 0x06
 6e0:	83 81       	ldd	r24, Z+3	; 0x03
 6e2:	81 ff       	sbrs	r24, 1
 6e4:	bf c1       	rjmp	.+894    	; 0xa64 <vfprintf+0x3c4>
 6e6:	ce 01       	movw	r24, r28
 6e8:	01 96       	adiw	r24, 0x01	; 1
 6ea:	3c 01       	movw	r6, r24
 6ec:	f6 01       	movw	r30, r12
 6ee:	93 81       	ldd	r25, Z+3	; 0x03
 6f0:	f7 01       	movw	r30, r14
 6f2:	93 fd       	sbrc	r25, 3
 6f4:	85 91       	lpm	r24, Z+
 6f6:	93 ff       	sbrs	r25, 3
 6f8:	81 91       	ld	r24, Z+
 6fa:	7f 01       	movw	r14, r30
 6fc:	88 23       	and	r24, r24
 6fe:	09 f4       	brne	.+2      	; 0x702 <vfprintf+0x62>
 700:	ad c1       	rjmp	.+858    	; 0xa5c <vfprintf+0x3bc>
 702:	85 32       	cpi	r24, 0x25	; 37
 704:	39 f4       	brne	.+14     	; 0x714 <vfprintf+0x74>
 706:	93 fd       	sbrc	r25, 3
 708:	85 91       	lpm	r24, Z+
 70a:	93 ff       	sbrs	r25, 3
 70c:	81 91       	ld	r24, Z+
 70e:	7f 01       	movw	r14, r30
 710:	85 32       	cpi	r24, 0x25	; 37
 712:	21 f4       	brne	.+8      	; 0x71c <vfprintf+0x7c>
 714:	b6 01       	movw	r22, r12
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	d6 d1       	rcall	.+940    	; 0xac6 <fputc>
 71a:	e8 cf       	rjmp	.-48     	; 0x6ec <vfprintf+0x4c>
 71c:	91 2c       	mov	r9, r1
 71e:	21 2c       	mov	r2, r1
 720:	31 2c       	mov	r3, r1
 722:	ff e1       	ldi	r31, 0x1F	; 31
 724:	f3 15       	cp	r31, r3
 726:	d8 f0       	brcs	.+54     	; 0x75e <vfprintf+0xbe>
 728:	8b 32       	cpi	r24, 0x2B	; 43
 72a:	79 f0       	breq	.+30     	; 0x74a <vfprintf+0xaa>
 72c:	38 f4       	brcc	.+14     	; 0x73c <vfprintf+0x9c>
 72e:	80 32       	cpi	r24, 0x20	; 32
 730:	79 f0       	breq	.+30     	; 0x750 <vfprintf+0xb0>
 732:	83 32       	cpi	r24, 0x23	; 35
 734:	a1 f4       	brne	.+40     	; 0x75e <vfprintf+0xbe>
 736:	23 2d       	mov	r18, r3
 738:	20 61       	ori	r18, 0x10	; 16
 73a:	1d c0       	rjmp	.+58     	; 0x776 <vfprintf+0xd6>
 73c:	8d 32       	cpi	r24, 0x2D	; 45
 73e:	61 f0       	breq	.+24     	; 0x758 <vfprintf+0xb8>
 740:	80 33       	cpi	r24, 0x30	; 48
 742:	69 f4       	brne	.+26     	; 0x75e <vfprintf+0xbe>
 744:	23 2d       	mov	r18, r3
 746:	21 60       	ori	r18, 0x01	; 1
 748:	16 c0       	rjmp	.+44     	; 0x776 <vfprintf+0xd6>
 74a:	83 2d       	mov	r24, r3
 74c:	82 60       	ori	r24, 0x02	; 2
 74e:	38 2e       	mov	r3, r24
 750:	e3 2d       	mov	r30, r3
 752:	e4 60       	ori	r30, 0x04	; 4
 754:	3e 2e       	mov	r3, r30
 756:	2a c0       	rjmp	.+84     	; 0x7ac <vfprintf+0x10c>
 758:	f3 2d       	mov	r31, r3
 75a:	f8 60       	ori	r31, 0x08	; 8
 75c:	1d c0       	rjmp	.+58     	; 0x798 <vfprintf+0xf8>
 75e:	37 fc       	sbrc	r3, 7
 760:	2d c0       	rjmp	.+90     	; 0x7bc <vfprintf+0x11c>
 762:	20 ed       	ldi	r18, 0xD0	; 208
 764:	28 0f       	add	r18, r24
 766:	2a 30       	cpi	r18, 0x0A	; 10
 768:	40 f0       	brcs	.+16     	; 0x77a <vfprintf+0xda>
 76a:	8e 32       	cpi	r24, 0x2E	; 46
 76c:	b9 f4       	brne	.+46     	; 0x79c <vfprintf+0xfc>
 76e:	36 fc       	sbrc	r3, 6
 770:	75 c1       	rjmp	.+746    	; 0xa5c <vfprintf+0x3bc>
 772:	23 2d       	mov	r18, r3
 774:	20 64       	ori	r18, 0x40	; 64
 776:	32 2e       	mov	r3, r18
 778:	19 c0       	rjmp	.+50     	; 0x7ac <vfprintf+0x10c>
 77a:	36 fe       	sbrs	r3, 6
 77c:	06 c0       	rjmp	.+12     	; 0x78a <vfprintf+0xea>
 77e:	8a e0       	ldi	r24, 0x0A	; 10
 780:	98 9e       	mul	r9, r24
 782:	20 0d       	add	r18, r0
 784:	11 24       	eor	r1, r1
 786:	92 2e       	mov	r9, r18
 788:	11 c0       	rjmp	.+34     	; 0x7ac <vfprintf+0x10c>
 78a:	ea e0       	ldi	r30, 0x0A	; 10
 78c:	2e 9e       	mul	r2, r30
 78e:	20 0d       	add	r18, r0
 790:	11 24       	eor	r1, r1
 792:	22 2e       	mov	r2, r18
 794:	f3 2d       	mov	r31, r3
 796:	f0 62       	ori	r31, 0x20	; 32
 798:	3f 2e       	mov	r3, r31
 79a:	08 c0       	rjmp	.+16     	; 0x7ac <vfprintf+0x10c>
 79c:	8c 36       	cpi	r24, 0x6C	; 108
 79e:	21 f4       	brne	.+8      	; 0x7a8 <vfprintf+0x108>
 7a0:	83 2d       	mov	r24, r3
 7a2:	80 68       	ori	r24, 0x80	; 128
 7a4:	38 2e       	mov	r3, r24
 7a6:	02 c0       	rjmp	.+4      	; 0x7ac <vfprintf+0x10c>
 7a8:	88 36       	cpi	r24, 0x68	; 104
 7aa:	41 f4       	brne	.+16     	; 0x7bc <vfprintf+0x11c>
 7ac:	f7 01       	movw	r30, r14
 7ae:	93 fd       	sbrc	r25, 3
 7b0:	85 91       	lpm	r24, Z+
 7b2:	93 ff       	sbrs	r25, 3
 7b4:	81 91       	ld	r24, Z+
 7b6:	7f 01       	movw	r14, r30
 7b8:	81 11       	cpse	r24, r1
 7ba:	b3 cf       	rjmp	.-154    	; 0x722 <vfprintf+0x82>
 7bc:	98 2f       	mov	r25, r24
 7be:	9f 7d       	andi	r25, 0xDF	; 223
 7c0:	95 54       	subi	r25, 0x45	; 69
 7c2:	93 30       	cpi	r25, 0x03	; 3
 7c4:	28 f4       	brcc	.+10     	; 0x7d0 <vfprintf+0x130>
 7c6:	0c 5f       	subi	r16, 0xFC	; 252
 7c8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ca:	9f e3       	ldi	r25, 0x3F	; 63
 7cc:	99 83       	std	Y+1, r25	; 0x01
 7ce:	0d c0       	rjmp	.+26     	; 0x7ea <vfprintf+0x14a>
 7d0:	83 36       	cpi	r24, 0x63	; 99
 7d2:	31 f0       	breq	.+12     	; 0x7e0 <vfprintf+0x140>
 7d4:	83 37       	cpi	r24, 0x73	; 115
 7d6:	71 f0       	breq	.+28     	; 0x7f4 <vfprintf+0x154>
 7d8:	83 35       	cpi	r24, 0x53	; 83
 7da:	09 f0       	breq	.+2      	; 0x7de <vfprintf+0x13e>
 7dc:	55 c0       	rjmp	.+170    	; 0x888 <vfprintf+0x1e8>
 7de:	20 c0       	rjmp	.+64     	; 0x820 <vfprintf+0x180>
 7e0:	f8 01       	movw	r30, r16
 7e2:	80 81       	ld	r24, Z
 7e4:	89 83       	std	Y+1, r24	; 0x01
 7e6:	0e 5f       	subi	r16, 0xFE	; 254
 7e8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ea:	88 24       	eor	r8, r8
 7ec:	83 94       	inc	r8
 7ee:	91 2c       	mov	r9, r1
 7f0:	53 01       	movw	r10, r6
 7f2:	12 c0       	rjmp	.+36     	; 0x818 <vfprintf+0x178>
 7f4:	28 01       	movw	r4, r16
 7f6:	f2 e0       	ldi	r31, 0x02	; 2
 7f8:	4f 0e       	add	r4, r31
 7fa:	51 1c       	adc	r5, r1
 7fc:	f8 01       	movw	r30, r16
 7fe:	a0 80       	ld	r10, Z
 800:	b1 80       	ldd	r11, Z+1	; 0x01
 802:	36 fe       	sbrs	r3, 6
 804:	03 c0       	rjmp	.+6      	; 0x80c <vfprintf+0x16c>
 806:	69 2d       	mov	r22, r9
 808:	70 e0       	ldi	r23, 0x00	; 0
 80a:	02 c0       	rjmp	.+4      	; 0x810 <vfprintf+0x170>
 80c:	6f ef       	ldi	r22, 0xFF	; 255
 80e:	7f ef       	ldi	r23, 0xFF	; 255
 810:	c5 01       	movw	r24, r10
 812:	4e d1       	rcall	.+668    	; 0xab0 <strnlen>
 814:	4c 01       	movw	r8, r24
 816:	82 01       	movw	r16, r4
 818:	f3 2d       	mov	r31, r3
 81a:	ff 77       	andi	r31, 0x7F	; 127
 81c:	3f 2e       	mov	r3, r31
 81e:	15 c0       	rjmp	.+42     	; 0x84a <vfprintf+0x1aa>
 820:	28 01       	movw	r4, r16
 822:	22 e0       	ldi	r18, 0x02	; 2
 824:	42 0e       	add	r4, r18
 826:	51 1c       	adc	r5, r1
 828:	f8 01       	movw	r30, r16
 82a:	a0 80       	ld	r10, Z
 82c:	b1 80       	ldd	r11, Z+1	; 0x01
 82e:	36 fe       	sbrs	r3, 6
 830:	03 c0       	rjmp	.+6      	; 0x838 <vfprintf+0x198>
 832:	69 2d       	mov	r22, r9
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	02 c0       	rjmp	.+4      	; 0x83c <vfprintf+0x19c>
 838:	6f ef       	ldi	r22, 0xFF	; 255
 83a:	7f ef       	ldi	r23, 0xFF	; 255
 83c:	c5 01       	movw	r24, r10
 83e:	2d d1       	rcall	.+602    	; 0xa9a <strnlen_P>
 840:	4c 01       	movw	r8, r24
 842:	f3 2d       	mov	r31, r3
 844:	f0 68       	ori	r31, 0x80	; 128
 846:	3f 2e       	mov	r3, r31
 848:	82 01       	movw	r16, r4
 84a:	33 fc       	sbrc	r3, 3
 84c:	19 c0       	rjmp	.+50     	; 0x880 <vfprintf+0x1e0>
 84e:	82 2d       	mov	r24, r2
 850:	90 e0       	ldi	r25, 0x00	; 0
 852:	88 16       	cp	r8, r24
 854:	99 06       	cpc	r9, r25
 856:	a0 f4       	brcc	.+40     	; 0x880 <vfprintf+0x1e0>
 858:	b6 01       	movw	r22, r12
 85a:	80 e2       	ldi	r24, 0x20	; 32
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	33 d1       	rcall	.+614    	; 0xac6 <fputc>
 860:	2a 94       	dec	r2
 862:	f5 cf       	rjmp	.-22     	; 0x84e <vfprintf+0x1ae>
 864:	f5 01       	movw	r30, r10
 866:	37 fc       	sbrc	r3, 7
 868:	85 91       	lpm	r24, Z+
 86a:	37 fe       	sbrs	r3, 7
 86c:	81 91       	ld	r24, Z+
 86e:	5f 01       	movw	r10, r30
 870:	b6 01       	movw	r22, r12
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	28 d1       	rcall	.+592    	; 0xac6 <fputc>
 876:	21 10       	cpse	r2, r1
 878:	2a 94       	dec	r2
 87a:	21 e0       	ldi	r18, 0x01	; 1
 87c:	82 1a       	sub	r8, r18
 87e:	91 08       	sbc	r9, r1
 880:	81 14       	cp	r8, r1
 882:	91 04       	cpc	r9, r1
 884:	79 f7       	brne	.-34     	; 0x864 <vfprintf+0x1c4>
 886:	e1 c0       	rjmp	.+450    	; 0xa4a <vfprintf+0x3aa>
 888:	84 36       	cpi	r24, 0x64	; 100
 88a:	11 f0       	breq	.+4      	; 0x890 <vfprintf+0x1f0>
 88c:	89 36       	cpi	r24, 0x69	; 105
 88e:	39 f5       	brne	.+78     	; 0x8de <vfprintf+0x23e>
 890:	f8 01       	movw	r30, r16
 892:	37 fe       	sbrs	r3, 7
 894:	07 c0       	rjmp	.+14     	; 0x8a4 <vfprintf+0x204>
 896:	60 81       	ld	r22, Z
 898:	71 81       	ldd	r23, Z+1	; 0x01
 89a:	82 81       	ldd	r24, Z+2	; 0x02
 89c:	93 81       	ldd	r25, Z+3	; 0x03
 89e:	0c 5f       	subi	r16, 0xFC	; 252
 8a0:	1f 4f       	sbci	r17, 0xFF	; 255
 8a2:	08 c0       	rjmp	.+16     	; 0x8b4 <vfprintf+0x214>
 8a4:	60 81       	ld	r22, Z
 8a6:	71 81       	ldd	r23, Z+1	; 0x01
 8a8:	07 2e       	mov	r0, r23
 8aa:	00 0c       	add	r0, r0
 8ac:	88 0b       	sbc	r24, r24
 8ae:	99 0b       	sbc	r25, r25
 8b0:	0e 5f       	subi	r16, 0xFE	; 254
 8b2:	1f 4f       	sbci	r17, 0xFF	; 255
 8b4:	f3 2d       	mov	r31, r3
 8b6:	ff 76       	andi	r31, 0x6F	; 111
 8b8:	3f 2e       	mov	r3, r31
 8ba:	97 ff       	sbrs	r25, 7
 8bc:	09 c0       	rjmp	.+18     	; 0x8d0 <vfprintf+0x230>
 8be:	90 95       	com	r25
 8c0:	80 95       	com	r24
 8c2:	70 95       	com	r23
 8c4:	61 95       	neg	r22
 8c6:	7f 4f       	sbci	r23, 0xFF	; 255
 8c8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ca:	9f 4f       	sbci	r25, 0xFF	; 255
 8cc:	f0 68       	ori	r31, 0x80	; 128
 8ce:	3f 2e       	mov	r3, r31
 8d0:	2a e0       	ldi	r18, 0x0A	; 10
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	a3 01       	movw	r20, r6
 8d6:	33 d1       	rcall	.+614    	; 0xb3e <__ultoa_invert>
 8d8:	88 2e       	mov	r8, r24
 8da:	86 18       	sub	r8, r6
 8dc:	44 c0       	rjmp	.+136    	; 0x966 <vfprintf+0x2c6>
 8de:	85 37       	cpi	r24, 0x75	; 117
 8e0:	31 f4       	brne	.+12     	; 0x8ee <vfprintf+0x24e>
 8e2:	23 2d       	mov	r18, r3
 8e4:	2f 7e       	andi	r18, 0xEF	; 239
 8e6:	b2 2e       	mov	r11, r18
 8e8:	2a e0       	ldi	r18, 0x0A	; 10
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	25 c0       	rjmp	.+74     	; 0x938 <vfprintf+0x298>
 8ee:	93 2d       	mov	r25, r3
 8f0:	99 7f       	andi	r25, 0xF9	; 249
 8f2:	b9 2e       	mov	r11, r25
 8f4:	8f 36       	cpi	r24, 0x6F	; 111
 8f6:	c1 f0       	breq	.+48     	; 0x928 <vfprintf+0x288>
 8f8:	18 f4       	brcc	.+6      	; 0x900 <vfprintf+0x260>
 8fa:	88 35       	cpi	r24, 0x58	; 88
 8fc:	79 f0       	breq	.+30     	; 0x91c <vfprintf+0x27c>
 8fe:	ae c0       	rjmp	.+348    	; 0xa5c <vfprintf+0x3bc>
 900:	80 37       	cpi	r24, 0x70	; 112
 902:	19 f0       	breq	.+6      	; 0x90a <vfprintf+0x26a>
 904:	88 37       	cpi	r24, 0x78	; 120
 906:	21 f0       	breq	.+8      	; 0x910 <vfprintf+0x270>
 908:	a9 c0       	rjmp	.+338    	; 0xa5c <vfprintf+0x3bc>
 90a:	e9 2f       	mov	r30, r25
 90c:	e0 61       	ori	r30, 0x10	; 16
 90e:	be 2e       	mov	r11, r30
 910:	b4 fe       	sbrs	r11, 4
 912:	0d c0       	rjmp	.+26     	; 0x92e <vfprintf+0x28e>
 914:	fb 2d       	mov	r31, r11
 916:	f4 60       	ori	r31, 0x04	; 4
 918:	bf 2e       	mov	r11, r31
 91a:	09 c0       	rjmp	.+18     	; 0x92e <vfprintf+0x28e>
 91c:	34 fe       	sbrs	r3, 4
 91e:	0a c0       	rjmp	.+20     	; 0x934 <vfprintf+0x294>
 920:	29 2f       	mov	r18, r25
 922:	26 60       	ori	r18, 0x06	; 6
 924:	b2 2e       	mov	r11, r18
 926:	06 c0       	rjmp	.+12     	; 0x934 <vfprintf+0x294>
 928:	28 e0       	ldi	r18, 0x08	; 8
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	05 c0       	rjmp	.+10     	; 0x938 <vfprintf+0x298>
 92e:	20 e1       	ldi	r18, 0x10	; 16
 930:	30 e0       	ldi	r19, 0x00	; 0
 932:	02 c0       	rjmp	.+4      	; 0x938 <vfprintf+0x298>
 934:	20 e1       	ldi	r18, 0x10	; 16
 936:	32 e0       	ldi	r19, 0x02	; 2
 938:	f8 01       	movw	r30, r16
 93a:	b7 fe       	sbrs	r11, 7
 93c:	07 c0       	rjmp	.+14     	; 0x94c <vfprintf+0x2ac>
 93e:	60 81       	ld	r22, Z
 940:	71 81       	ldd	r23, Z+1	; 0x01
 942:	82 81       	ldd	r24, Z+2	; 0x02
 944:	93 81       	ldd	r25, Z+3	; 0x03
 946:	0c 5f       	subi	r16, 0xFC	; 252
 948:	1f 4f       	sbci	r17, 0xFF	; 255
 94a:	06 c0       	rjmp	.+12     	; 0x958 <vfprintf+0x2b8>
 94c:	60 81       	ld	r22, Z
 94e:	71 81       	ldd	r23, Z+1	; 0x01
 950:	80 e0       	ldi	r24, 0x00	; 0
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 5f       	subi	r16, 0xFE	; 254
 956:	1f 4f       	sbci	r17, 0xFF	; 255
 958:	a3 01       	movw	r20, r6
 95a:	f1 d0       	rcall	.+482    	; 0xb3e <__ultoa_invert>
 95c:	88 2e       	mov	r8, r24
 95e:	86 18       	sub	r8, r6
 960:	fb 2d       	mov	r31, r11
 962:	ff 77       	andi	r31, 0x7F	; 127
 964:	3f 2e       	mov	r3, r31
 966:	36 fe       	sbrs	r3, 6
 968:	0d c0       	rjmp	.+26     	; 0x984 <vfprintf+0x2e4>
 96a:	23 2d       	mov	r18, r3
 96c:	2e 7f       	andi	r18, 0xFE	; 254
 96e:	a2 2e       	mov	r10, r18
 970:	89 14       	cp	r8, r9
 972:	58 f4       	brcc	.+22     	; 0x98a <vfprintf+0x2ea>
 974:	34 fe       	sbrs	r3, 4
 976:	0b c0       	rjmp	.+22     	; 0x98e <vfprintf+0x2ee>
 978:	32 fc       	sbrc	r3, 2
 97a:	09 c0       	rjmp	.+18     	; 0x98e <vfprintf+0x2ee>
 97c:	83 2d       	mov	r24, r3
 97e:	8e 7e       	andi	r24, 0xEE	; 238
 980:	a8 2e       	mov	r10, r24
 982:	05 c0       	rjmp	.+10     	; 0x98e <vfprintf+0x2ee>
 984:	b8 2c       	mov	r11, r8
 986:	a3 2c       	mov	r10, r3
 988:	03 c0       	rjmp	.+6      	; 0x990 <vfprintf+0x2f0>
 98a:	b8 2c       	mov	r11, r8
 98c:	01 c0       	rjmp	.+2      	; 0x990 <vfprintf+0x2f0>
 98e:	b9 2c       	mov	r11, r9
 990:	a4 fe       	sbrs	r10, 4
 992:	0f c0       	rjmp	.+30     	; 0x9b2 <vfprintf+0x312>
 994:	fe 01       	movw	r30, r28
 996:	e8 0d       	add	r30, r8
 998:	f1 1d       	adc	r31, r1
 99a:	80 81       	ld	r24, Z
 99c:	80 33       	cpi	r24, 0x30	; 48
 99e:	21 f4       	brne	.+8      	; 0x9a8 <vfprintf+0x308>
 9a0:	9a 2d       	mov	r25, r10
 9a2:	99 7e       	andi	r25, 0xE9	; 233
 9a4:	a9 2e       	mov	r10, r25
 9a6:	09 c0       	rjmp	.+18     	; 0x9ba <vfprintf+0x31a>
 9a8:	a2 fe       	sbrs	r10, 2
 9aa:	06 c0       	rjmp	.+12     	; 0x9b8 <vfprintf+0x318>
 9ac:	b3 94       	inc	r11
 9ae:	b3 94       	inc	r11
 9b0:	04 c0       	rjmp	.+8      	; 0x9ba <vfprintf+0x31a>
 9b2:	8a 2d       	mov	r24, r10
 9b4:	86 78       	andi	r24, 0x86	; 134
 9b6:	09 f0       	breq	.+2      	; 0x9ba <vfprintf+0x31a>
 9b8:	b3 94       	inc	r11
 9ba:	a3 fc       	sbrc	r10, 3
 9bc:	10 c0       	rjmp	.+32     	; 0x9de <vfprintf+0x33e>
 9be:	a0 fe       	sbrs	r10, 0
 9c0:	06 c0       	rjmp	.+12     	; 0x9ce <vfprintf+0x32e>
 9c2:	b2 14       	cp	r11, r2
 9c4:	80 f4       	brcc	.+32     	; 0x9e6 <vfprintf+0x346>
 9c6:	28 0c       	add	r2, r8
 9c8:	92 2c       	mov	r9, r2
 9ca:	9b 18       	sub	r9, r11
 9cc:	0d c0       	rjmp	.+26     	; 0x9e8 <vfprintf+0x348>
 9ce:	b2 14       	cp	r11, r2
 9d0:	58 f4       	brcc	.+22     	; 0x9e8 <vfprintf+0x348>
 9d2:	b6 01       	movw	r22, r12
 9d4:	80 e2       	ldi	r24, 0x20	; 32
 9d6:	90 e0       	ldi	r25, 0x00	; 0
 9d8:	76 d0       	rcall	.+236    	; 0xac6 <fputc>
 9da:	b3 94       	inc	r11
 9dc:	f8 cf       	rjmp	.-16     	; 0x9ce <vfprintf+0x32e>
 9de:	b2 14       	cp	r11, r2
 9e0:	18 f4       	brcc	.+6      	; 0x9e8 <vfprintf+0x348>
 9e2:	2b 18       	sub	r2, r11
 9e4:	02 c0       	rjmp	.+4      	; 0x9ea <vfprintf+0x34a>
 9e6:	98 2c       	mov	r9, r8
 9e8:	21 2c       	mov	r2, r1
 9ea:	a4 fe       	sbrs	r10, 4
 9ec:	0f c0       	rjmp	.+30     	; 0xa0c <vfprintf+0x36c>
 9ee:	b6 01       	movw	r22, r12
 9f0:	80 e3       	ldi	r24, 0x30	; 48
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	68 d0       	rcall	.+208    	; 0xac6 <fputc>
 9f6:	a2 fe       	sbrs	r10, 2
 9f8:	16 c0       	rjmp	.+44     	; 0xa26 <vfprintf+0x386>
 9fa:	a1 fc       	sbrc	r10, 1
 9fc:	03 c0       	rjmp	.+6      	; 0xa04 <vfprintf+0x364>
 9fe:	88 e7       	ldi	r24, 0x78	; 120
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <vfprintf+0x368>
 a04:	88 e5       	ldi	r24, 0x58	; 88
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	b6 01       	movw	r22, r12
 a0a:	0c c0       	rjmp	.+24     	; 0xa24 <vfprintf+0x384>
 a0c:	8a 2d       	mov	r24, r10
 a0e:	86 78       	andi	r24, 0x86	; 134
 a10:	51 f0       	breq	.+20     	; 0xa26 <vfprintf+0x386>
 a12:	a1 fe       	sbrs	r10, 1
 a14:	02 c0       	rjmp	.+4      	; 0xa1a <vfprintf+0x37a>
 a16:	8b e2       	ldi	r24, 0x2B	; 43
 a18:	01 c0       	rjmp	.+2      	; 0xa1c <vfprintf+0x37c>
 a1a:	80 e2       	ldi	r24, 0x20	; 32
 a1c:	a7 fc       	sbrc	r10, 7
 a1e:	8d e2       	ldi	r24, 0x2D	; 45
 a20:	b6 01       	movw	r22, r12
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	50 d0       	rcall	.+160    	; 0xac6 <fputc>
 a26:	89 14       	cp	r8, r9
 a28:	30 f4       	brcc	.+12     	; 0xa36 <vfprintf+0x396>
 a2a:	b6 01       	movw	r22, r12
 a2c:	80 e3       	ldi	r24, 0x30	; 48
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	4a d0       	rcall	.+148    	; 0xac6 <fputc>
 a32:	9a 94       	dec	r9
 a34:	f8 cf       	rjmp	.-16     	; 0xa26 <vfprintf+0x386>
 a36:	8a 94       	dec	r8
 a38:	f3 01       	movw	r30, r6
 a3a:	e8 0d       	add	r30, r8
 a3c:	f1 1d       	adc	r31, r1
 a3e:	80 81       	ld	r24, Z
 a40:	b6 01       	movw	r22, r12
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	40 d0       	rcall	.+128    	; 0xac6 <fputc>
 a46:	81 10       	cpse	r8, r1
 a48:	f6 cf       	rjmp	.-20     	; 0xa36 <vfprintf+0x396>
 a4a:	22 20       	and	r2, r2
 a4c:	09 f4       	brne	.+2      	; 0xa50 <vfprintf+0x3b0>
 a4e:	4e ce       	rjmp	.-868    	; 0x6ec <vfprintf+0x4c>
 a50:	b6 01       	movw	r22, r12
 a52:	80 e2       	ldi	r24, 0x20	; 32
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	37 d0       	rcall	.+110    	; 0xac6 <fputc>
 a58:	2a 94       	dec	r2
 a5a:	f7 cf       	rjmp	.-18     	; 0xa4a <vfprintf+0x3aa>
 a5c:	f6 01       	movw	r30, r12
 a5e:	86 81       	ldd	r24, Z+6	; 0x06
 a60:	97 81       	ldd	r25, Z+7	; 0x07
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <vfprintf+0x3c8>
 a64:	8f ef       	ldi	r24, 0xFF	; 255
 a66:	9f ef       	ldi	r25, 0xFF	; 255
 a68:	2b 96       	adiw	r28, 0x0b	; 11
 a6a:	0f b6       	in	r0, 0x3f	; 63
 a6c:	f8 94       	cli
 a6e:	de bf       	out	0x3e, r29	; 62
 a70:	0f be       	out	0x3f, r0	; 63
 a72:	cd bf       	out	0x3d, r28	; 61
 a74:	df 91       	pop	r29
 a76:	cf 91       	pop	r28
 a78:	1f 91       	pop	r17
 a7a:	0f 91       	pop	r16
 a7c:	ff 90       	pop	r15
 a7e:	ef 90       	pop	r14
 a80:	df 90       	pop	r13
 a82:	cf 90       	pop	r12
 a84:	bf 90       	pop	r11
 a86:	af 90       	pop	r10
 a88:	9f 90       	pop	r9
 a8a:	8f 90       	pop	r8
 a8c:	7f 90       	pop	r7
 a8e:	6f 90       	pop	r6
 a90:	5f 90       	pop	r5
 a92:	4f 90       	pop	r4
 a94:	3f 90       	pop	r3
 a96:	2f 90       	pop	r2
 a98:	08 95       	ret

00000a9a <strnlen_P>:
 a9a:	fc 01       	movw	r30, r24
 a9c:	05 90       	lpm	r0, Z+
 a9e:	61 50       	subi	r22, 0x01	; 1
 aa0:	70 40       	sbci	r23, 0x00	; 0
 aa2:	01 10       	cpse	r0, r1
 aa4:	d8 f7       	brcc	.-10     	; 0xa9c <strnlen_P+0x2>
 aa6:	80 95       	com	r24
 aa8:	90 95       	com	r25
 aaa:	8e 0f       	add	r24, r30
 aac:	9f 1f       	adc	r25, r31
 aae:	08 95       	ret

00000ab0 <strnlen>:
 ab0:	fc 01       	movw	r30, r24
 ab2:	61 50       	subi	r22, 0x01	; 1
 ab4:	70 40       	sbci	r23, 0x00	; 0
 ab6:	01 90       	ld	r0, Z+
 ab8:	01 10       	cpse	r0, r1
 aba:	d8 f7       	brcc	.-10     	; 0xab2 <strnlen+0x2>
 abc:	80 95       	com	r24
 abe:	90 95       	com	r25
 ac0:	8e 0f       	add	r24, r30
 ac2:	9f 1f       	adc	r25, r31
 ac4:	08 95       	ret

00000ac6 <fputc>:
 ac6:	0f 93       	push	r16
 ac8:	1f 93       	push	r17
 aca:	cf 93       	push	r28
 acc:	df 93       	push	r29
 ace:	fb 01       	movw	r30, r22
 ad0:	23 81       	ldd	r18, Z+3	; 0x03
 ad2:	21 fd       	sbrc	r18, 1
 ad4:	03 c0       	rjmp	.+6      	; 0xadc <fputc+0x16>
 ad6:	8f ef       	ldi	r24, 0xFF	; 255
 ad8:	9f ef       	ldi	r25, 0xFF	; 255
 ada:	2c c0       	rjmp	.+88     	; 0xb34 <fputc+0x6e>
 adc:	22 ff       	sbrs	r18, 2
 ade:	16 c0       	rjmp	.+44     	; 0xb0c <fputc+0x46>
 ae0:	46 81       	ldd	r20, Z+6	; 0x06
 ae2:	57 81       	ldd	r21, Z+7	; 0x07
 ae4:	24 81       	ldd	r18, Z+4	; 0x04
 ae6:	35 81       	ldd	r19, Z+5	; 0x05
 ae8:	42 17       	cp	r20, r18
 aea:	53 07       	cpc	r21, r19
 aec:	44 f4       	brge	.+16     	; 0xafe <fputc+0x38>
 aee:	a0 81       	ld	r26, Z
 af0:	b1 81       	ldd	r27, Z+1	; 0x01
 af2:	9d 01       	movw	r18, r26
 af4:	2f 5f       	subi	r18, 0xFF	; 255
 af6:	3f 4f       	sbci	r19, 0xFF	; 255
 af8:	31 83       	std	Z+1, r19	; 0x01
 afa:	20 83       	st	Z, r18
 afc:	8c 93       	st	X, r24
 afe:	26 81       	ldd	r18, Z+6	; 0x06
 b00:	37 81       	ldd	r19, Z+7	; 0x07
 b02:	2f 5f       	subi	r18, 0xFF	; 255
 b04:	3f 4f       	sbci	r19, 0xFF	; 255
 b06:	37 83       	std	Z+7, r19	; 0x07
 b08:	26 83       	std	Z+6, r18	; 0x06
 b0a:	14 c0       	rjmp	.+40     	; 0xb34 <fputc+0x6e>
 b0c:	8b 01       	movw	r16, r22
 b0e:	ec 01       	movw	r28, r24
 b10:	fb 01       	movw	r30, r22
 b12:	00 84       	ldd	r0, Z+8	; 0x08
 b14:	f1 85       	ldd	r31, Z+9	; 0x09
 b16:	e0 2d       	mov	r30, r0
 b18:	19 95       	eicall
 b1a:	89 2b       	or	r24, r25
 b1c:	e1 f6       	brne	.-72     	; 0xad6 <fputc+0x10>
 b1e:	d8 01       	movw	r26, r16
 b20:	16 96       	adiw	r26, 0x06	; 6
 b22:	8d 91       	ld	r24, X+
 b24:	9c 91       	ld	r25, X
 b26:	17 97       	sbiw	r26, 0x07	; 7
 b28:	01 96       	adiw	r24, 0x01	; 1
 b2a:	17 96       	adiw	r26, 0x07	; 7
 b2c:	9c 93       	st	X, r25
 b2e:	8e 93       	st	-X, r24
 b30:	16 97       	sbiw	r26, 0x06	; 6
 b32:	ce 01       	movw	r24, r28
 b34:	df 91       	pop	r29
 b36:	cf 91       	pop	r28
 b38:	1f 91       	pop	r17
 b3a:	0f 91       	pop	r16
 b3c:	08 95       	ret

00000b3e <__ultoa_invert>:
 b3e:	fa 01       	movw	r30, r20
 b40:	aa 27       	eor	r26, r26
 b42:	28 30       	cpi	r18, 0x08	; 8
 b44:	51 f1       	breq	.+84     	; 0xb9a <__ultoa_invert+0x5c>
 b46:	20 31       	cpi	r18, 0x10	; 16
 b48:	81 f1       	breq	.+96     	; 0xbaa <__ultoa_invert+0x6c>
 b4a:	e8 94       	clt
 b4c:	6f 93       	push	r22
 b4e:	6e 7f       	andi	r22, 0xFE	; 254
 b50:	6e 5f       	subi	r22, 0xFE	; 254
 b52:	7f 4f       	sbci	r23, 0xFF	; 255
 b54:	8f 4f       	sbci	r24, 0xFF	; 255
 b56:	9f 4f       	sbci	r25, 0xFF	; 255
 b58:	af 4f       	sbci	r26, 0xFF	; 255
 b5a:	b1 e0       	ldi	r27, 0x01	; 1
 b5c:	3e d0       	rcall	.+124    	; 0xbda <__ultoa_invert+0x9c>
 b5e:	b4 e0       	ldi	r27, 0x04	; 4
 b60:	3c d0       	rcall	.+120    	; 0xbda <__ultoa_invert+0x9c>
 b62:	67 0f       	add	r22, r23
 b64:	78 1f       	adc	r23, r24
 b66:	89 1f       	adc	r24, r25
 b68:	9a 1f       	adc	r25, r26
 b6a:	a1 1d       	adc	r26, r1
 b6c:	68 0f       	add	r22, r24
 b6e:	79 1f       	adc	r23, r25
 b70:	8a 1f       	adc	r24, r26
 b72:	91 1d       	adc	r25, r1
 b74:	a1 1d       	adc	r26, r1
 b76:	6a 0f       	add	r22, r26
 b78:	71 1d       	adc	r23, r1
 b7a:	81 1d       	adc	r24, r1
 b7c:	91 1d       	adc	r25, r1
 b7e:	a1 1d       	adc	r26, r1
 b80:	20 d0       	rcall	.+64     	; 0xbc2 <__ultoa_invert+0x84>
 b82:	09 f4       	brne	.+2      	; 0xb86 <__ultoa_invert+0x48>
 b84:	68 94       	set
 b86:	3f 91       	pop	r19
 b88:	2a e0       	ldi	r18, 0x0A	; 10
 b8a:	26 9f       	mul	r18, r22
 b8c:	11 24       	eor	r1, r1
 b8e:	30 19       	sub	r19, r0
 b90:	30 5d       	subi	r19, 0xD0	; 208
 b92:	31 93       	st	Z+, r19
 b94:	de f6       	brtc	.-74     	; 0xb4c <__ultoa_invert+0xe>
 b96:	cf 01       	movw	r24, r30
 b98:	08 95       	ret
 b9a:	46 2f       	mov	r20, r22
 b9c:	47 70       	andi	r20, 0x07	; 7
 b9e:	40 5d       	subi	r20, 0xD0	; 208
 ba0:	41 93       	st	Z+, r20
 ba2:	b3 e0       	ldi	r27, 0x03	; 3
 ba4:	0f d0       	rcall	.+30     	; 0xbc4 <__ultoa_invert+0x86>
 ba6:	c9 f7       	brne	.-14     	; 0xb9a <__ultoa_invert+0x5c>
 ba8:	f6 cf       	rjmp	.-20     	; 0xb96 <__ultoa_invert+0x58>
 baa:	46 2f       	mov	r20, r22
 bac:	4f 70       	andi	r20, 0x0F	; 15
 bae:	40 5d       	subi	r20, 0xD0	; 208
 bb0:	4a 33       	cpi	r20, 0x3A	; 58
 bb2:	18 f0       	brcs	.+6      	; 0xbba <__ultoa_invert+0x7c>
 bb4:	49 5d       	subi	r20, 0xD9	; 217
 bb6:	31 fd       	sbrc	r19, 1
 bb8:	40 52       	subi	r20, 0x20	; 32
 bba:	41 93       	st	Z+, r20
 bbc:	02 d0       	rcall	.+4      	; 0xbc2 <__ultoa_invert+0x84>
 bbe:	a9 f7       	brne	.-22     	; 0xbaa <__ultoa_invert+0x6c>
 bc0:	ea cf       	rjmp	.-44     	; 0xb96 <__ultoa_invert+0x58>
 bc2:	b4 e0       	ldi	r27, 0x04	; 4
 bc4:	a6 95       	lsr	r26
 bc6:	97 95       	ror	r25
 bc8:	87 95       	ror	r24
 bca:	77 95       	ror	r23
 bcc:	67 95       	ror	r22
 bce:	ba 95       	dec	r27
 bd0:	c9 f7       	brne	.-14     	; 0xbc4 <__ultoa_invert+0x86>
 bd2:	00 97       	sbiw	r24, 0x00	; 0
 bd4:	61 05       	cpc	r22, r1
 bd6:	71 05       	cpc	r23, r1
 bd8:	08 95       	ret
 bda:	9b 01       	movw	r18, r22
 bdc:	ac 01       	movw	r20, r24
 bde:	0a 2e       	mov	r0, r26
 be0:	06 94       	lsr	r0
 be2:	57 95       	ror	r21
 be4:	47 95       	ror	r20
 be6:	37 95       	ror	r19
 be8:	27 95       	ror	r18
 bea:	ba 95       	dec	r27
 bec:	c9 f7       	brne	.-14     	; 0xbe0 <__ultoa_invert+0xa2>
 bee:	62 0f       	add	r22, r18
 bf0:	73 1f       	adc	r23, r19
 bf2:	84 1f       	adc	r24, r20
 bf4:	95 1f       	adc	r25, r21
 bf6:	a0 1d       	adc	r26, r0
 bf8:	08 95       	ret

00000bfa <_exit>:
 bfa:	f8 94       	cli

00000bfc <__stop_program>:
 bfc:	ff cf       	rjmp	.-2      	; 0xbfc <__stop_program>
