
DriverAndMsgTest_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800200  000004d8  0000056c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000405  0080021c  0080021c  00000588  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000588  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001449  00000000  00000000  000006e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e0b  00000000  00000000  00001b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f7  00000000  00000000  00002934  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000030c  00000000  00000000  0000312c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006cb  00000000  00000000  00003438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008a7  00000000  00000000  00003b03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  000043aa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	e1 c0       	rjmp	.+450    	; 0x218 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	f6 c1       	rjmp	.+1004   	; 0x452 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e8 ed       	ldi	r30, 0xD8	; 216
  fc:	f4 e0       	ldi	r31, 0x04	; 4
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 31       	cpi	r26, 0x1C	; 28
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	26 e0       	ldi	r18, 0x06	; 6
 110:	ac e1       	ldi	r26, 0x1C	; 28
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 32       	cpi	r26, 0x21	; 33
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	31 d0       	rcall	.+98     	; 0x182 <main>
 120:	d9 c1       	rjmp	.+946    	; 0x4d4 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <getAction>:
	PORTB |= (1<<PB7);
	
}

void ledOff(){
	PORTB &= ~(1<<PB7);
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	e2 97       	sbiw	r28, 0x32	; 50
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
 144:	7c 01       	movw	r14, r24
 146:	6b 01       	movw	r12, r22
 148:	8e 01       	movw	r16, r28
 14a:	0f 5f       	subi	r16, 0xFF	; 255
 14c:	1f 4f       	sbci	r17, 0xFF	; 255
 14e:	82 e3       	ldi	r24, 0x32	; 50
 150:	f8 01       	movw	r30, r16
 152:	11 92       	st	Z+, r1
 154:	8a 95       	dec	r24
 156:	e9 f7       	brne	.-6      	; 0x152 <getAction+0x2e>
 158:	c8 01       	movw	r24, r16
 15a:	e4 d0       	rcall	.+456    	; 0x324 <getMsg>
 15c:	a6 01       	movw	r20, r12
 15e:	b7 01       	movw	r22, r14
 160:	c8 01       	movw	r24, r16
 162:	20 d1       	rcall	.+576    	; 0x3a4 <parseMsg>
 164:	e2 96       	adiw	r28, 0x32	; 50
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	08 95       	ret

00000182 <main>:
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	e2 97       	sbiw	r28, 0x32	; 50
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
 196:	77 d0       	rcall	.+238    	; 0x286 <initUART>
 198:	78 94       	sei
 19a:	0f 2e       	mov	r0, r31
 19c:	f4 e1       	ldi	r31, 0x14	; 20
 19e:	cf 2e       	mov	r12, r31
 1a0:	f0 2d       	mov	r31, r0
 1a2:	8e 01       	movw	r16, r28
 1a4:	01 5e       	subi	r16, 0xE1	; 225
 1a6:	1f 4f       	sbci	r17, 0xFF	; 255
 1a8:	0f 2e       	mov	r0, r31
 1aa:	fe e1       	ldi	r31, 0x1E	; 30
 1ac:	df 2e       	mov	r13, r31
 1ae:	f0 2d       	mov	r31, r0
 1b0:	ce 01       	movw	r24, r28
 1b2:	01 96       	adiw	r24, 0x01	; 1
 1b4:	7c 01       	movw	r14, r24
 1b6:	ef d0       	rcall	.+478    	; 0x396 <newMsgAv>
 1b8:	88 23       	and	r24, r24
 1ba:	e9 f3       	breq	.-6      	; 0x1b6 <main+0x34>
 1bc:	f8 01       	movw	r30, r16
 1be:	8c 2d       	mov	r24, r12
 1c0:	11 92       	st	Z+, r1
 1c2:	8a 95       	dec	r24
 1c4:	e9 f7       	brne	.-6      	; 0x1c0 <main+0x3e>
 1c6:	f7 01       	movw	r30, r14
 1c8:	8d 2d       	mov	r24, r13
 1ca:	11 92       	st	Z+, r1
 1cc:	8a 95       	dec	r24
 1ce:	e9 f7       	brne	.-6      	; 0x1ca <main+0x48>
 1d0:	b7 01       	movw	r22, r14
 1d2:	c8 01       	movw	r24, r16
 1d4:	a7 df       	rcall	.-178    	; 0x124 <getAction>
 1d6:	62 e0       	ldi	r22, 0x02	; 2
 1d8:	72 e0       	ldi	r23, 0x02	; 2
 1da:	c8 01       	movw	r24, r16
 1dc:	72 d1       	rcall	.+740    	; 0x4c2 <strcmp>
 1de:	89 2b       	or	r24, r25
 1e0:	21 f4       	brne	.+8      	; 0x1ea <main+0x68>
 1e2:	86 e0       	ldi	r24, 0x06	; 6
 1e4:	92 e0       	ldi	r25, 0x02	; 2
 1e6:	94 d0       	rcall	.+296    	; 0x310 <sendMsg>
 1e8:	e6 cf       	rjmp	.-52     	; 0x1b6 <main+0x34>
 1ea:	6a e0       	ldi	r22, 0x0A	; 10
 1ec:	72 e0       	ldi	r23, 0x02	; 2
 1ee:	c8 01       	movw	r24, r16
 1f0:	68 d1       	rcall	.+720    	; 0x4c2 <strcmp>
 1f2:	89 2b       	or	r24, r25
 1f4:	21 f4       	brne	.+8      	; 0x1fe <main+0x7c>
 1f6:	80 e1       	ldi	r24, 0x10	; 16
 1f8:	92 e0       	ldi	r25, 0x02	; 2
 1fa:	8a d0       	rcall	.+276    	; 0x310 <sendMsg>
 1fc:	dc cf       	rjmp	.-72     	; 0x1b6 <main+0x34>
 1fe:	86 e1       	ldi	r24, 0x16	; 22
 200:	92 e0       	ldi	r25, 0x02	; 2
 202:	86 d0       	rcall	.+268    	; 0x310 <sendMsg>
 204:	d8 cf       	rjmp	.-80     	; 0x1b6 <main+0x34>

00000206 <stopTimer>:
 206:	85 b5       	in	r24, 0x25	; 37
 208:	88 7f       	andi	r24, 0xF8	; 248
 20a:	85 bd       	out	0x25, r24	; 37
 20c:	a5 98       	cbi	0x14, 5	; 20
 20e:	10 92 1d 02 	sts	0x021D, r1	; 0x80021d <__data_end+0x1>
 212:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <__data_end>
 216:	08 95       	ret

00000218 <__vector_21>:
	
}

ISR(TIMER0_COMPA_vect){
 218:	1f 92       	push	r1
 21a:	0f 92       	push	r0
 21c:	0f b6       	in	r0, 0x3f	; 63
 21e:	0f 92       	push	r0
 220:	11 24       	eor	r1, r1
 222:	0b b6       	in	r0, 0x3b	; 59
 224:	0f 92       	push	r0
 226:	2f 93       	push	r18
 228:	3f 93       	push	r19
 22a:	4f 93       	push	r20
 22c:	5f 93       	push	r21
 22e:	6f 93       	push	r22
 230:	7f 93       	push	r23
 232:	8f 93       	push	r24
 234:	9f 93       	push	r25
 236:	af 93       	push	r26
 238:	bf 93       	push	r27
 23a:	ef 93       	push	r30
 23c:	ff 93       	push	r31
	timer0cnt++;
 23e:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <__data_end>
 242:	90 91 1d 02 	lds	r25, 0x021D	; 0x80021d <__data_end+0x1>
 246:	01 96       	adiw	r24, 0x01	; 1
 248:	90 93 1d 02 	sts	0x021D, r25	; 0x80021d <__data_end+0x1>
 24c:	80 93 1c 02 	sts	0x021C, r24	; 0x80021c <__data_end>
	if(timer0cnt>=timer0Steps){
 250:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 254:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 258:	82 17       	cp	r24, r18
 25a:	93 07       	cpc	r25, r19
 25c:	08 f0       	brcs	.+2      	; 0x260 <__vector_21+0x48>
		stopTimer();
 25e:	d3 df       	rcall	.-90     	; 0x206 <stopTimer>
	}
 260:	ff 91       	pop	r31
 262:	ef 91       	pop	r30
 264:	bf 91       	pop	r27
 266:	af 91       	pop	r26
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	7f 91       	pop	r23
 26e:	6f 91       	pop	r22
 270:	5f 91       	pop	r21
 272:	4f 91       	pop	r20
 274:	3f 91       	pop	r19
 276:	2f 91       	pop	r18
 278:	0f 90       	pop	r0
 27a:	0b be       	out	0x3b, r0	; 59
 27c:	0f 90       	pop	r0
 27e:	0f be       	out	0x3f, r0	; 63
 280:	0f 90       	pop	r0
 282:	1f 90       	pop	r1
 284:	18 95       	reti

00000286 <initUART>:
	char _msg[200]={'\0'};
	strcat(_msg, msg);
	strcat(_msg, "\t");
	strcat(_msg, xStr);
	sendMsg(_msg);
}
 286:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 28a:	87 e6       	ldi	r24, 0x67	; 103
 28c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 296:	86 e0       	ldi	r24, 0x06	; 6
 298:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 29c:	e1 ec       	ldi	r30, 0xC1	; 193
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	80 81       	ld	r24, Z
 2a2:	88 61       	ori	r24, 0x18	; 24
 2a4:	80 83       	st	Z, r24
 2a6:	80 81       	ld	r24, Z
 2a8:	80 68       	ori	r24, 0x80	; 128
 2aa:	80 83       	st	Z, r24
 2ac:	78 94       	sei
 2ae:	08 95       	ret

000002b0 <writeBytes>:
 2b0:	0f 93       	push	r16
 2b2:	1f 93       	push	r17
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	8c 01       	movw	r16, r24
 2ba:	16 16       	cp	r1, r22
 2bc:	17 06       	cpc	r1, r23
 2be:	9c f4       	brge	.+38     	; 0x2e6 <writeBytes+0x36>
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	e0 ec       	ldi	r30, 0xC0	; 192
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	c6 ec       	ldi	r28, 0xC6	; 198
 2c8:	d0 e0       	ldi	r29, 0x00	; 0
 2ca:	90 81       	ld	r25, Z
 2cc:	95 ff       	sbrs	r25, 5
 2ce:	fd cf       	rjmp	.-6      	; 0x2ca <writeBytes+0x1a>
 2d0:	d8 01       	movw	r26, r16
 2d2:	a2 0f       	add	r26, r18
 2d4:	b1 1d       	adc	r27, r1
 2d6:	9c 91       	ld	r25, X
 2d8:	98 83       	st	Y, r25
 2da:	2f 5f       	subi	r18, 0xFF	; 255
 2dc:	42 2f       	mov	r20, r18
 2de:	50 e0       	ldi	r21, 0x00	; 0
 2e0:	46 17       	cp	r20, r22
 2e2:	57 07       	cpc	r21, r23
 2e4:	94 f3       	brlt	.-28     	; 0x2ca <writeBytes+0x1a>
 2e6:	e0 ec       	ldi	r30, 0xC0	; 192
 2e8:	f0 e0       	ldi	r31, 0x00	; 0
 2ea:	80 81       	ld	r24, Z
 2ec:	85 ff       	sbrs	r24, 5
 2ee:	fd cf       	rjmp	.-6      	; 0x2ea <writeBytes+0x3a>
 2f0:	8d e0       	ldi	r24, 0x0D	; 13
 2f2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 2f6:	e0 ec       	ldi	r30, 0xC0	; 192
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	85 ff       	sbrs	r24, 5
 2fe:	fd cf       	rjmp	.-6      	; 0x2fa <writeBytes+0x4a>
 300:	8a e0       	ldi	r24, 0x0A	; 10
 302:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 306:	df 91       	pop	r29
 308:	cf 91       	pop	r28
 30a:	1f 91       	pop	r17
 30c:	0f 91       	pop	r16
 30e:	08 95       	ret

00000310 <sendMsg>:
 310:	fc 01       	movw	r30, r24
 312:	01 90       	ld	r0, Z+
 314:	00 20       	and	r0, r0
 316:	e9 f7       	brne	.-6      	; 0x312 <sendMsg+0x2>
 318:	31 97       	sbiw	r30, 0x01	; 1
 31a:	bf 01       	movw	r22, r30
 31c:	68 1b       	sub	r22, r24
 31e:	79 0b       	sbc	r23, r25
 320:	c7 cf       	rjmp	.-114    	; 0x2b0 <writeBytes>
 322:	08 95       	ret

00000324 <getMsg>:


//returns the oldest message in the buffer
void getMsg(char msg[]){
 324:	ac 01       	movw	r20, r24
	//there must be at least one message aviable
	if(newMessage>0){
 326:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <newMessage>
 32a:	88 23       	and	r24, r24
 32c:	99 f1       	breq	.+102    	; 0x394 <getMsg+0x70>
		newMessage--;
 32e:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <newMessage>
 332:	81 50       	subi	r24, 0x01	; 1
 334:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <newMessage>
		uint8_t i=0;
		
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 338:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <rxReadPos>
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	ef 5d       	subi	r30, 0xDF	; 223
 340:	fd 4f       	sbci	r31, 0xFD	; 253
 342:	80 81       	ld	r24, Z
 344:	8d 30       	cpi	r24, 0x0D	; 13
 346:	d1 f0       	breq	.+52     	; 0x37c <getMsg+0x58>
 348:	90 e0       	ldi	r25, 0x00	; 0
			msg[i++]=rxBuffer[rxReadPos++];
 34a:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <rxReadPos>
 34e:	21 e0       	ldi	r18, 0x01	; 1
 350:	2e 0f       	add	r18, r30
 352:	20 93 20 02 	sts	0x0220, r18	; 0x800220 <rxReadPos>
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	ef 5d       	subi	r30, 0xDF	; 223
 35a:	fd 4f       	sbci	r31, 0xFD	; 253
 35c:	20 81       	ld	r18, Z
 35e:	fa 01       	movw	r30, r20
 360:	e9 0f       	add	r30, r25
 362:	f1 1d       	adc	r31, r1
 364:	20 83       	st	Z, r18
			
			if(rxReadPos >= RX_BUFFER_SIZE)
 366:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <rxReadPos>
	if(newMessage>0){
		newMessage--;
		uint8_t i=0;
		
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 36a:	e0 91 20 02 	lds	r30, 0x0220	; 0x800220 <rxReadPos>
			msg[i++]=rxBuffer[rxReadPos++];
 36e:	9f 5f       	subi	r25, 0xFF	; 255
	if(newMessage>0){
		newMessage--;
		uint8_t i=0;
		
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	ef 5d       	subi	r30, 0xDF	; 223
 374:	fd 4f       	sbci	r31, 0xFD	; 253
 376:	20 81       	ld	r18, Z
 378:	2d 30       	cpi	r18, 0x0D	; 13
 37a:	39 f7       	brne	.-50     	; 0x34a <getMsg+0x26>
			if(rxReadPos >= RX_BUFFER_SIZE)
			{
				rxReadPos = 0;
			}
		}
		rxReadPos++;
 37c:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <rxReadPos>
 380:	8f 5f       	subi	r24, 0xFF	; 255
 382:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <rxReadPos>
		//if second endbyte is used, then move rxReadPos one forward
		if(USESECONDEDNBYTE){
			rxReadPos++;
 386:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <rxReadPos>
 38a:	8f 5f       	subi	r24, 0xFF	; 255
 38c:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <rxReadPos>
			if(rxReadPos >= RX_BUFFER_SIZE)
 390:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <rxReadPos>
 394:	08 95       	ret

00000396 <newMsgAv>:
		}
	}
}

uint8_t newMsgAv(){
	if(newMessage>0)
 396:	90 91 1e 02 	lds	r25, 0x021E	; 0x80021e <newMessage>
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	91 11       	cpse	r25, r1
 39e:	01 c0       	rjmp	.+2      	; 0x3a2 <newMsgAv+0xc>
 3a0:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	else
		return 0;
}
 3a2:	08 95       	ret

000003a4 <parseMsg>:


void parseMsg(char msg[], char command[], char payload[]){
 3a4:	bf 92       	push	r11
 3a6:	cf 92       	push	r12
 3a8:	df 92       	push	r13
 3aa:	ef 92       	push	r14
 3ac:	ff 92       	push	r15
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	8c 01       	movw	r16, r24
 3b8:	6b 01       	movw	r12, r22
 3ba:	7a 01       	movw	r14, r20
	
	uint8_t cnt=0;
	uint8_t cntCom=0;
	uint8_t cntPay=0;
	char c=msg[cnt];
 3bc:	fc 01       	movw	r30, r24
 3be:	80 81       	ld	r24, Z
	
	//first put each char from msg to command[] until the char is = or '\r'
	while(c!='=' && c!=FIRSTENDBYTE && c!='\0'){
 3c0:	8d 33       	cpi	r24, 0x3D	; 61
 3c2:	f1 f0       	breq	.+60     	; 0x400 <__LOCK_REGION_LENGTH__>
 3c4:	8d 30       	cpi	r24, 0x0D	; 13
 3c6:	f1 f0       	breq	.+60     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3c8:	88 23       	and	r24, r24
 3ca:	f1 f0       	breq	.+60     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3cc:	d0 e0       	ldi	r29, 0x00	; 0
 3ce:	c0 e0       	ldi	r28, 0x00	; 0
		if(c!='\b') //if char is '\b' then don't put in command
 3d0:	88 30       	cpi	r24, 0x08	; 8
 3d2:	51 f0       	breq	.+20     	; 0x3e8 <parseMsg+0x44>
			command[cntCom++]=tolower(c);//convert each char to lower case
 3d4:	bb 24       	eor	r11, r11
 3d6:	b3 94       	inc	r11
 3d8:	bd 0e       	add	r11, r29
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	6a d0       	rcall	.+212    	; 0x4b2 <tolower>
 3de:	f6 01       	movw	r30, r12
 3e0:	ed 0f       	add	r30, r29
 3e2:	f1 1d       	adc	r31, r1
 3e4:	80 83       	st	Z, r24
 3e6:	db 2d       	mov	r29, r11
		c=msg[++cnt];
 3e8:	cf 5f       	subi	r28, 0xFF	; 255
 3ea:	f8 01       	movw	r30, r16
 3ec:	ec 0f       	add	r30, r28
 3ee:	f1 1d       	adc	r31, r1
 3f0:	80 81       	ld	r24, Z
	uint8_t cntCom=0;
	uint8_t cntPay=0;
	char c=msg[cnt];
	
	//first put each char from msg to command[] until the char is = or '\r'
	while(c!='=' && c!=FIRSTENDBYTE && c!='\0'){
 3f2:	8d 33       	cpi	r24, 0x3D	; 61
 3f4:	51 f0       	breq	.+20     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3f6:	8d 30       	cpi	r24, 0x0D	; 13
 3f8:	41 f0       	breq	.+16     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 3fa:	81 11       	cpse	r24, r1
 3fc:	e9 cf       	rjmp	.-46     	; 0x3d0 <parseMsg+0x2c>
 3fe:	05 c0       	rjmp	.+10     	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
}


void parseMsg(char msg[], char command[], char payload[]){
	
	uint8_t cnt=0;
 400:	c0 e0       	ldi	r28, 0x00	; 0
 402:	03 c0       	rjmp	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 404:	c0 e0       	ldi	r28, 0x00	; 0
 406:	01 c0       	rjmp	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 408:	c0 e0       	ldi	r28, 0x00	; 0
		if(c!='\b') //if char is '\b' then don't put in command
			command[cntCom++]=tolower(c);//convert each char to lower case
		c=msg[++cnt];
	}
	
	c=msg[++cnt];//if c is not '\r' or end of string char '\0' then put it in payload
 40a:	cf 5f       	subi	r28, 0xFF	; 255
 40c:	f8 01       	movw	r30, r16
 40e:	ec 0f       	add	r30, r28
 410:	f1 1d       	adc	r31, r1
 412:	80 81       	ld	r24, Z
	while(c!=FIRSTENDBYTE && c!='\0'){
 414:	8d 30       	cpi	r24, 0x0D	; 13
 416:	99 f0       	breq	.+38     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 418:	88 23       	and	r24, r24
 41a:	89 f0       	breq	.+34     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 41c:	90 e0       	ldi	r25, 0x00	; 0
		if(c!='\b')
 41e:	88 30       	cpi	r24, 0x08	; 8
 420:	29 f0       	breq	.+10     	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
			payload[cntPay++]=c;
 422:	f7 01       	movw	r30, r14
 424:	e9 0f       	add	r30, r25
 426:	f1 1d       	adc	r31, r1
 428:	80 83       	st	Z, r24
 42a:	9f 5f       	subi	r25, 0xFF	; 255
		c=msg[++cnt];
 42c:	cf 5f       	subi	r28, 0xFF	; 255
 42e:	f8 01       	movw	r30, r16
 430:	ec 0f       	add	r30, r28
 432:	f1 1d       	adc	r31, r1
 434:	80 81       	ld	r24, Z
			command[cntCom++]=tolower(c);//convert each char to lower case
		c=msg[++cnt];
	}
	
	c=msg[++cnt];//if c is not '\r' or end of string char '\0' then put it in payload
	while(c!=FIRSTENDBYTE && c!='\0'){
 436:	8d 30       	cpi	r24, 0x0D	; 13
 438:	11 f0       	breq	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 43a:	81 11       	cpse	r24, r1
 43c:	f0 cf       	rjmp	.-32     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		if(c!='\b')
			payload[cntPay++]=c;
		c=msg[++cnt];
	}
	
}
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	1f 91       	pop	r17
 444:	0f 91       	pop	r16
 446:	ff 90       	pop	r15
 448:	ef 90       	pop	r14
 44a:	df 90       	pop	r13
 44c:	cf 90       	pop	r12
 44e:	bf 90       	pop	r11
 450:	08 95       	ret

00000452 <__vector_25>:


//lib
ISR(USART0_RX_vect){
 452:	1f 92       	push	r1
 454:	0f 92       	push	r0
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	0f 92       	push	r0
 45a:	11 24       	eor	r1, r1
 45c:	0b b6       	in	r0, 0x3b	; 59
 45e:	0f 92       	push	r0
 460:	8f 93       	push	r24
 462:	ef 93       	push	r30
 464:	ff 93       	push	r31
	rxBuffer[rxWritePos] = UDR0;
 466:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <rxWritePos>
 46a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	ef 5d       	subi	r30, 0xDF	; 223
 472:	fd 4f       	sbci	r31, 0xFD	; 253
 474:	80 83       	st	Z, r24
	
	if(rxBuffer[rxWritePos]==FIRSTENDBYTE){
 476:	e0 91 1f 02 	lds	r30, 0x021F	; 0x80021f <rxWritePos>
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	ef 5d       	subi	r30, 0xDF	; 223
 47e:	fd 4f       	sbci	r31, 0xFD	; 253
 480:	80 81       	ld	r24, Z
 482:	8d 30       	cpi	r24, 0x0D	; 13
 484:	29 f4       	brne	.+10     	; 0x490 <__vector_25+0x3e>
		newMessage++;
 486:	80 91 1e 02 	lds	r24, 0x021E	; 0x80021e <newMessage>
 48a:	8f 5f       	subi	r24, 0xFF	; 255
 48c:	80 93 1e 02 	sts	0x021E, r24	; 0x80021e <newMessage>
	}
	
	rxWritePos++;
 490:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <rxWritePos>
 494:	8f 5f       	subi	r24, 0xFF	; 255
 496:	80 93 1f 02 	sts	0x021F, r24	; 0x80021f <rxWritePos>
	
	if(rxWritePos >= RX_BUFFER_SIZE)
 49a:	80 91 1f 02 	lds	r24, 0x021F	; 0x80021f <rxWritePos>
	{
		rxWritePos = 0;
	}
}
 49e:	ff 91       	pop	r31
 4a0:	ef 91       	pop	r30
 4a2:	8f 91       	pop	r24
 4a4:	0f 90       	pop	r0
 4a6:	0b be       	out	0x3b, r0	; 59
 4a8:	0f 90       	pop	r0
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	0f 90       	pop	r0
 4ae:	1f 90       	pop	r1
 4b0:	18 95       	reti

000004b2 <tolower>:
 4b2:	91 11       	cpse	r25, r1
 4b4:	08 95       	ret
 4b6:	81 54       	subi	r24, 0x41	; 65
 4b8:	8a 51       	subi	r24, 0x1A	; 26
 4ba:	08 f4       	brcc	.+2      	; 0x4be <tolower+0xc>
 4bc:	80 5e       	subi	r24, 0xE0	; 224
 4be:	85 5a       	subi	r24, 0xA5	; 165
 4c0:	08 95       	ret

000004c2 <strcmp>:
 4c2:	fb 01       	movw	r30, r22
 4c4:	dc 01       	movw	r26, r24
 4c6:	8d 91       	ld	r24, X+
 4c8:	01 90       	ld	r0, Z+
 4ca:	80 19       	sub	r24, r0
 4cc:	01 10       	cpse	r0, r1
 4ce:	d9 f3       	breq	.-10     	; 0x4c6 <strcmp+0x4>
 4d0:	99 0b       	sbc	r25, r25
 4d2:	08 95       	ret

000004d4 <_exit>:
 4d4:	f8 94       	cli

000004d6 <__stop_program>:
 4d6:	ff cf       	rjmp	.-2      	; 0x4d6 <__stop_program>
