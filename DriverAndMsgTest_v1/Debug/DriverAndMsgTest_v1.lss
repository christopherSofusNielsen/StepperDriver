
DriverAndMsgTest_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800200  000002e6  0000037a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000403  0080020c  0080020c  00000386  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000386  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  000003f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011aa  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d75  00000000  00000000  00001642  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005cc  00000000  00000000  000023b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  00002984  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000634  00000000  00000000  00002b58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004e3  00000000  00000000  0000318c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  0000366f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	0e c1       	rjmp	.+540    	; 0x282 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e6 ee       	ldi	r30, 0xE6	; 230
  fc:	f2 e0       	ldi	r31, 0x02	; 2
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 30       	cpi	r26, 0x0C	; 12
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	26 e0       	ldi	r18, 0x06	; 6
 110:	ac e0       	ldi	r26, 0x0C	; 12
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	af 30       	cpi	r26, 0x0F	; 15
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	02 d0       	rcall	.+4      	; 0x124 <main>
 120:	e0 c0       	rjmp	.+448    	; 0x2e2 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <main>:

#include "UART_debug_v2.h" //debug


int main(void)
{
 124:	cf 93       	push	r28
 126:	df 93       	push	r29
 128:	cd b7       	in	r28, 0x3d	; 61
 12a:	de b7       	in	r29, 0x3e	; 62
 12c:	e2 97       	sbiw	r28, 0x32	; 50
 12e:	0f b6       	in	r0, 0x3f	; 63
 130:	f8 94       	cli
 132:	de bf       	out	0x3e, r29	; 62
 134:	0f be       	out	0x3f, r0	; 63
 136:	cd bf       	out	0x3d, r28	; 61
    //Initialize
	initUART();
 138:	1a d0       	rcall	.+52     	; 0x16e <initUART>
	sendMsg("Hello");
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	92 e0       	ldi	r25, 0x02	; 2
 13e:	5c d0       	rcall	.+184    	; 0x1f8 <sendMsg>
	sendMsg("World");
 140:	86 e0       	ldi	r24, 0x06	; 6
 142:	92 e0       	ldi	r25, 0x02	; 2
 144:	59 d0       	rcall	.+178    	; 0x1f8 <sendMsg>
	
    while (1) 
    {
		if (newMsgAv())
		{
			char msg[50]={'\0'};
 146:	0f 2e       	mov	r0, r31
 148:	f2 e3       	ldi	r31, 0x32	; 50
 14a:	ff 2e       	mov	r15, r31
 14c:	f0 2d       	mov	r31, r0
 14e:	8e 01       	movw	r16, r28
 150:	0f 5f       	subi	r16, 0xFF	; 255
	sendMsg("World");
	
	
    while (1) 
    {
		if (newMsgAv())
 152:	1f 4f       	sbci	r17, 0xFF	; 255
 154:	8f d0       	rcall	.+286    	; 0x274 <newMsgAv>
 156:	88 23       	and	r24, r24
 158:	e9 f3       	breq	.-6      	; 0x154 <main+0x30>
		{
			char msg[50]={'\0'};
 15a:	f8 01       	movw	r30, r16
 15c:	8f 2d       	mov	r24, r15
 15e:	11 92       	st	Z+, r1
 160:	8a 95       	dec	r24
			getMsg(msg);
 162:	e9 f7       	brne	.-6      	; 0x15e <main+0x3a>
 164:	c8 01       	movw	r24, r16
 166:	52 d0       	rcall	.+164    	; 0x20c <getMsg>
			sendMsg(msg);
 168:	c8 01       	movw	r24, r16
 16a:	46 d0       	rcall	.+140    	; 0x1f8 <sendMsg>
 16c:	f3 cf       	rjmp	.-26     	; 0x154 <main+0x30>

0000016e <initUART>:
 16e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
	char _msg[200]={'\0'};
	strcat(_msg, msg);
	strcat(_msg, "\t");
	strcat(_msg, xStr);
	sendMsg(_msg);
}
 172:	87 e6       	ldi	r24, 0x67	; 103
 174:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 17e:	86 e0       	ldi	r24, 0x06	; 6
 180:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 184:	e1 ec       	ldi	r30, 0xC1	; 193
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	80 81       	ld	r24, Z
 18a:	88 61       	ori	r24, 0x18	; 24
 18c:	80 83       	st	Z, r24
 18e:	80 81       	ld	r24, Z
 190:	80 68       	ori	r24, 0x80	; 128
 192:	80 83       	st	Z, r24
 194:	78 94       	sei
 196:	08 95       	ret

00000198 <writeBytes>:
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
 1a0:	8c 01       	movw	r16, r24
 1a2:	16 16       	cp	r1, r22
 1a4:	17 06       	cpc	r1, r23
 1a6:	9c f4       	brge	.+38     	; 0x1ce <writeBytes+0x36>
 1a8:	20 e0       	ldi	r18, 0x00	; 0
 1aa:	e0 ec       	ldi	r30, 0xC0	; 192
 1ac:	f0 e0       	ldi	r31, 0x00	; 0
 1ae:	c6 ec       	ldi	r28, 0xC6	; 198
 1b0:	d0 e0       	ldi	r29, 0x00	; 0
 1b2:	90 81       	ld	r25, Z
 1b4:	95 ff       	sbrs	r25, 5
 1b6:	fd cf       	rjmp	.-6      	; 0x1b2 <writeBytes+0x1a>
 1b8:	d8 01       	movw	r26, r16
 1ba:	a2 0f       	add	r26, r18
 1bc:	b1 1d       	adc	r27, r1
 1be:	9c 91       	ld	r25, X
 1c0:	98 83       	st	Y, r25
 1c2:	2f 5f       	subi	r18, 0xFF	; 255
 1c4:	42 2f       	mov	r20, r18
 1c6:	50 e0       	ldi	r21, 0x00	; 0
 1c8:	46 17       	cp	r20, r22
 1ca:	57 07       	cpc	r21, r23
 1cc:	94 f3       	brlt	.-28     	; 0x1b2 <writeBytes+0x1a>
 1ce:	e0 ec       	ldi	r30, 0xC0	; 192
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	85 ff       	sbrs	r24, 5
 1d6:	fd cf       	rjmp	.-6      	; 0x1d2 <writeBytes+0x3a>
 1d8:	8d e0       	ldi	r24, 0x0D	; 13
 1da:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 1de:	e0 ec       	ldi	r30, 0xC0	; 192
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	85 ff       	sbrs	r24, 5
 1e6:	fd cf       	rjmp	.-6      	; 0x1e2 <writeBytes+0x4a>
 1e8:	8a e0       	ldi	r24, 0x0A	; 10
 1ea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 1ee:	df 91       	pop	r29
 1f0:	cf 91       	pop	r28
 1f2:	1f 91       	pop	r17
 1f4:	0f 91       	pop	r16
 1f6:	08 95       	ret

000001f8 <sendMsg>:
 1f8:	fc 01       	movw	r30, r24
 1fa:	01 90       	ld	r0, Z+
 1fc:	00 20       	and	r0, r0
 1fe:	e9 f7       	brne	.-6      	; 0x1fa <sendMsg+0x2>
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	bf 01       	movw	r22, r30
 204:	68 1b       	sub	r22, r24
 206:	79 0b       	sbc	r23, r25
 208:	c7 cf       	rjmp	.-114    	; 0x198 <writeBytes>
 20a:	08 95       	ret

0000020c <getMsg>:


//returns the oldest message in the buffer
void getMsg(char msg[]){
 20c:	ac 01       	movw	r20, r24
	//there must be at least one message aviable
	if(newMessage>0){
 20e:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 212:	88 23       	and	r24, r24
 214:	39 f1       	breq	.+78     	; 0x264 <getMsg+0x58>
		newMessage--;
 216:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 21a:	81 50       	subi	r24, 0x01	; 1
 21c:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
			{
				rxReadPos = 0;
			}
		} while (msg[i++]!=FIRSTENDBYTE);*/
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 220:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <rxReadPos>
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	e1 5f       	subi	r30, 0xF1	; 241
 228:	fd 4f       	sbci	r31, 0xFD	; 253
 22a:	80 81       	ld	r24, Z
 22c:	8d 30       	cpi	r24, 0x0D	; 13
 22e:	d1 f0       	breq	.+52     	; 0x264 <getMsg+0x58>
 230:	90 e0       	ldi	r25, 0x00	; 0
			msg[i++]=rxBuffer[rxReadPos++];
 232:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <rxReadPos>
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	2e 0f       	add	r18, r30
 23a:	20 93 0e 02 	sts	0x020E, r18	; 0x80020e <rxReadPos>
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	e1 5f       	subi	r30, 0xF1	; 241
 242:	fd 4f       	sbci	r31, 0xFD	; 253
 244:	20 81       	ld	r18, Z
 246:	fa 01       	movw	r30, r20
 248:	e9 0f       	add	r30, r25
 24a:	f1 1d       	adc	r31, r1
 24c:	20 83       	st	Z, r18
			
			if(rxReadPos >= RX_BUFFER_SIZE)
 24e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <rxReadPos>
			{
				rxReadPos = 0;
			}
		} while (msg[i++]!=FIRSTENDBYTE);*/
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 252:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <rxReadPos>
			msg[i++]=rxBuffer[rxReadPos++];
 256:	9f 5f       	subi	r25, 0xFF	; 255
			{
				rxReadPos = 0;
			}
		} while (msg[i++]!=FIRSTENDBYTE);*/
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	e1 5f       	subi	r30, 0xF1	; 241
 25c:	fd 4f       	sbci	r31, 0xFD	; 253
 25e:	20 81       	ld	r18, Z
 260:	2d 30       	cpi	r18, 0x0D	; 13
 262:	39 f7       	brne	.-50     	; 0x232 <getMsg+0x26>
		} 
	}
	
	//if second endbyte is used, then move rxReadPos one forward
	if(USESECONDEDNBYTE){
		rxReadPos++;
 264:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <rxReadPos>
 268:	8f 5f       	subi	r24, 0xFF	; 255
 26a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <rxReadPos>
		if(rxReadPos >= RX_BUFFER_SIZE)
 26e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <rxReadPos>
 272:	08 95       	ret

00000274 <newMsgAv>:
		}
	}
}

uint8_t newMsgAv(){
	if(newMessage>0)
 274:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <__data_end>
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	91 11       	cpse	r25, r1
 27c:	01 c0       	rjmp	.+2      	; 0x280 <newMsgAv+0xc>
 27e:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	else
		return 0;
}
 280:	08 95       	ret

00000282 <__vector_25>:


//lib
ISR(USART0_RX_vect){
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	0b b6       	in	r0, 0x3b	; 59
 28e:	0f 92       	push	r0
 290:	8f 93       	push	r24
 292:	ef 93       	push	r30
 294:	ff 93       	push	r31
	rxBuffer[rxWritePos] = UDR0;
 296:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <rxWritePos>
 29a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	e1 5f       	subi	r30, 0xF1	; 241
 2a2:	fd 4f       	sbci	r31, 0xFD	; 253
 2a4:	80 83       	st	Z, r24
	
	if(rxBuffer[rxWritePos]==FIRSTENDBYTE){
 2a6:	e0 91 0d 02 	lds	r30, 0x020D	; 0x80020d <rxWritePos>
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	e1 5f       	subi	r30, 0xF1	; 241
 2ae:	fd 4f       	sbci	r31, 0xFD	; 253
 2b0:	80 81       	ld	r24, Z
 2b2:	8d 30       	cpi	r24, 0x0D	; 13
 2b4:	29 f4       	brne	.+10     	; 0x2c0 <__vector_25+0x3e>
		newMessage++;
 2b6:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <__data_end>
 2ba:	8f 5f       	subi	r24, 0xFF	; 255
 2bc:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <__data_end>
	}
	
	rxWritePos++;
 2c0:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <rxWritePos>
 2c4:	8f 5f       	subi	r24, 0xFF	; 255
 2c6:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <rxWritePos>
	
	if(rxWritePos >= RX_BUFFER_SIZE)
 2ca:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <rxWritePos>
	{
		rxWritePos = 0;
	}
}
 2ce:	ff 91       	pop	r31
 2d0:	ef 91       	pop	r30
 2d2:	8f 91       	pop	r24
 2d4:	0f 90       	pop	r0
 2d6:	0b be       	out	0x3b, r0	; 59
 2d8:	0f 90       	pop	r0
 2da:	0f be       	out	0x3f, r0	; 63
 2dc:	0f 90       	pop	r0
 2de:	1f 90       	pop	r1
 2e0:	18 95       	reti

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
