
DriverAndMsgTest_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  000003b0  00000444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000405  00800202  00800202  00000446  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000446  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000478  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000004b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001279  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc3  00000000  00000000  00001809  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000073a  00000000  00000000  000025cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000028c  00000000  00000000  00002d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000068b  00000000  00000000  00002f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ae  00000000  00000000  0000361f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003bcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	b5 c0       	rjmp	.+362    	; 0x1c0 <__vector_21>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	73 c1       	rjmp	.+742    	; 0x34c <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 eb       	ldi	r30, 0xB0	; 176
  fc:	f3 e0       	ldi	r31, 0x03	; 3
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 30       	cpi	r26, 0x02	; 2
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	26 e0       	ldi	r18, 0x06	; 6
 110:	a2 e0       	ldi	r26, 0x02	; 2
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 30       	cpi	r26, 0x07	; 7
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	23 d0       	rcall	.+70     	; 0x166 <main>
 120:	45 c1       	rjmp	.+650    	; 0x3ac <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <initTimer0>:
    }
}


void initTimer0(){
	TCCR0A |= (1<<COM0B0)|(1<<WGM01); //Toggle on compare + CTC mode
 124:	84 b5       	in	r24, 0x24	; 36
 126:	82 61       	ori	r24, 0x12	; 18
 128:	84 bd       	out	0x24, r24	; 36
	OCR0A=150;
 12a:	86 e9       	ldi	r24, 0x96	; 150
 12c:	87 bd       	out	0x27, r24	; 39
	OCR0B=150;
 12e:	88 bd       	out	0x28, r24	; 40
	TIMSK0 |= (1<<OCIE0A);
 130:	ee e6       	ldi	r30, 0x6E	; 110
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	82 60       	ori	r24, 0x02	; 2
 138:	80 83       	st	Z, r24
	
	//Enable pin
	DDRG|=(1<<PG5);
 13a:	9d 9a       	sbi	0x13, 5	; 19
	PORTG &= ~(1<<PG5);
 13c:	a5 98       	cbi	0x14, 5	; 20
 13e:	08 95       	ret

00000140 <startTimer>:
}

void startTimer(){
	TCCR0B |= (1<<CS01)|(1<<CS00);
 140:	85 b5       	in	r24, 0x25	; 37
 142:	83 60       	ori	r24, 0x03	; 3
 144:	85 bd       	out	0x25, r24	; 37
 146:	08 95       	ret

00000148 <stopTimer>:
}

void stopTimer(){
	TCCR0B &= ~0x07; // set CS2, CS1, CS0 low
 148:	85 b5       	in	r24, 0x25	; 37
 14a:	88 7f       	andi	r24, 0xF8	; 248
 14c:	85 bd       	out	0x25, r24	; 37
	PORTG &= ~(1<<PG5);
 14e:	a5 98       	cbi	0x14, 5	; 20
	timer0cnt=0;
 150:	10 92 03 02 	sts	0x0203, r1	; 0x800203 <__data_end+0x1>
 154:	10 92 02 02 	sts	0x0202, r1	; 0x800202 <__data_end>
 158:	08 95       	ret

0000015a <initLED>:
}


void initLED(){
	DDRB |= (1<<PB7);
 15a:	27 9a       	sbi	0x04, 7	; 4
 15c:	08 95       	ret

0000015e <ledOn>:
	
}

void ledOn(){
	PORTB |= (1<<PB7);
 15e:	2f 9a       	sbi	0x05, 7	; 5
 160:	08 95       	ret

00000162 <ledOff>:
	
}

void ledOff(){
	PORTB &= ~(1<<PB7);
 162:	2f 98       	cbi	0x05, 7	; 5
 164:	08 95       	ret

00000166 <main>:
void stopTimer();



int main(void)
{
 166:	cf 93       	push	r28
 168:	df 93       	push	r29
 16a:	cd b7       	in	r28, 0x3d	; 61
 16c:	de b7       	in	r29, 0x3e	; 62
 16e:	e2 97       	sbiw	r28, 0x32	; 50
 170:	0f b6       	in	r0, 0x3f	; 63
 172:	f8 94       	cli
 174:	de bf       	out	0x3e, r29	; 62
 176:	0f be       	out	0x3f, r0	; 63
 178:	cd bf       	out	0x3d, r28	; 61
    //Initialize
	initUART();
 17a:	59 d0       	rcall	.+178    	; 0x22e <initUART>
	initLED();
 17c:	ee df       	rcall	.-36     	; 0x15a <initLED>
	initTimer0();
 17e:	d2 df       	rcall	.-92     	; 0x124 <initTimer0>
 180:	78 94       	sei
	sei();
 182:	0f 2e       	mov	r0, r31
	
    while (1) 
    {
		if (newMsgAv())
		{
			char msg[50]={'\0'};
 184:	f2 e3       	ldi	r31, 0x32	; 50
 186:	ff 2e       	mov	r15, r31
 188:	f0 2d       	mov	r31, r0
 18a:	8e 01       	movw	r16, r28
 18c:	0f 5f       	subi	r16, 0xFF	; 255
 18e:	1f 4f       	sbci	r17, 0xFF	; 255
	sei();
	
	
    while (1) 
    {
		if (newMsgAv())
 190:	d6 d0       	rcall	.+428    	; 0x33e <newMsgAv>
 192:	88 23       	and	r24, r24
 194:	e9 f3       	breq	.-6      	; 0x190 <main+0x2a>
 196:	f8 01       	movw	r30, r16
		{
			char msg[50]={'\0'};
 198:	8f 2d       	mov	r24, r15
 19a:	11 92       	st	Z+, r1
 19c:	8a 95       	dec	r24
 19e:	e9 f7       	brne	.-6      	; 0x19a <main+0x34>
			getMsg(msg);
 1a0:	c8 01       	movw	r24, r16
 1a2:	94 d0       	rcall	.+296    	; 0x2cc <getMsg>
			
			if((char)msg[0]==(char)'1'){
 1a4:	89 81       	ldd	r24, Y+1	; 0x01
 1a6:	81 33       	cpi	r24, 0x31	; 49
 1a8:	19 f4       	brne	.+6      	; 0x1b0 <main+0x4a>
				ledOn();
 1aa:	d9 df       	rcall	.-78     	; 0x15e <ledOn>
				startTimer();
 1ac:	c9 df       	rcall	.-110    	; 0x140 <startTimer>
 1ae:	f0 cf       	rjmp	.-32     	; 0x190 <main+0x2a>
			}else if ((char)msg[0]==(char)'0')
 1b0:	80 33       	cpi	r24, 0x30	; 48
 1b2:	19 f4       	brne	.+6      	; 0x1ba <main+0x54>
			{
				ledOff();
 1b4:	d6 df       	rcall	.-84     	; 0x162 <ledOff>
 1b6:	c8 df       	rcall	.-112    	; 0x148 <stopTimer>
				stopTimer();
 1b8:	eb cf       	rjmp	.-42     	; 0x190 <main+0x2a>
 1ba:	c8 01       	movw	r24, r16
 1bc:	7d d0       	rcall	.+250    	; 0x2b8 <sendMsg>
			}else{
				//sendMsg("Error");
				sendMsg(msg);
 1be:	e8 cf       	rjmp	.-48     	; 0x190 <main+0x2a>

000001c0 <__vector_21>:
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
void ledOff(){
	PORTB &= ~(1<<PB7);
	
}

ISR(TIMER0_COMPA_vect){
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	0b b6       	in	r0, 0x3b	; 59
 1cc:	0f 92       	push	r0
 1ce:	2f 93       	push	r18
 1d0:	3f 93       	push	r19
 1d2:	4f 93       	push	r20
 1d4:	5f 93       	push	r21
 1d6:	6f 93       	push	r22
 1d8:	7f 93       	push	r23
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
	timer0cnt++;
 1e6:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <__data_end>
 1ea:	90 91 03 02 	lds	r25, 0x0203	; 0x800203 <__data_end+0x1>
 1ee:	01 96       	adiw	r24, 0x01	; 1
 1f0:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <__data_end+0x1>
 1f4:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <__data_end>
	if(timer0cnt>=timer0Steps){
 1f8:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
 1fc:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
 200:	82 17       	cp	r24, r18
 202:	93 07       	cpc	r25, r19
 204:	08 f0       	brcs	.+2      	; 0x208 <__vector_21+0x48>
		stopTimer();
 206:	a0 df       	rcall	.-192    	; 0x148 <stopTimer>
	}
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0b be       	out	0x3b, r0	; 59
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <initUART>:
	char _msg[200]={'\0'};
	strcat(_msg, msg);
	strcat(_msg, "\t");
	strcat(_msg, xStr);
	sendMsg(_msg);
}
 22e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 232:	87 e6       	ldi	r24, 0x67	; 103
 234:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 244:	e1 ec       	ldi	r30, 0xC1	; 193
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	88 61       	ori	r24, 0x18	; 24
 24c:	80 83       	st	Z, r24
 24e:	80 81       	ld	r24, Z
 250:	80 68       	ori	r24, 0x80	; 128
 252:	80 83       	st	Z, r24
 254:	78 94       	sei
 256:	08 95       	ret

00000258 <writeBytes>:
 258:	0f 93       	push	r16
 25a:	1f 93       	push	r17
 25c:	cf 93       	push	r28
 25e:	df 93       	push	r29
 260:	8c 01       	movw	r16, r24
 262:	16 16       	cp	r1, r22
 264:	17 06       	cpc	r1, r23
 266:	9c f4       	brge	.+38     	; 0x28e <writeBytes+0x36>
 268:	20 e0       	ldi	r18, 0x00	; 0
 26a:	e0 ec       	ldi	r30, 0xC0	; 192
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	c6 ec       	ldi	r28, 0xC6	; 198
 270:	d0 e0       	ldi	r29, 0x00	; 0
 272:	90 81       	ld	r25, Z
 274:	95 ff       	sbrs	r25, 5
 276:	fd cf       	rjmp	.-6      	; 0x272 <writeBytes+0x1a>
 278:	d8 01       	movw	r26, r16
 27a:	a2 0f       	add	r26, r18
 27c:	b1 1d       	adc	r27, r1
 27e:	9c 91       	ld	r25, X
 280:	98 83       	st	Y, r25
 282:	2f 5f       	subi	r18, 0xFF	; 255
 284:	42 2f       	mov	r20, r18
 286:	50 e0       	ldi	r21, 0x00	; 0
 288:	46 17       	cp	r20, r22
 28a:	57 07       	cpc	r21, r23
 28c:	94 f3       	brlt	.-28     	; 0x272 <writeBytes+0x1a>
 28e:	e0 ec       	ldi	r30, 0xC0	; 192
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	80 81       	ld	r24, Z
 294:	85 ff       	sbrs	r24, 5
 296:	fd cf       	rjmp	.-6      	; 0x292 <writeBytes+0x3a>
 298:	8d e0       	ldi	r24, 0x0D	; 13
 29a:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 29e:	e0 ec       	ldi	r30, 0xC0	; 192
 2a0:	f0 e0       	ldi	r31, 0x00	; 0
 2a2:	80 81       	ld	r24, Z
 2a4:	85 ff       	sbrs	r24, 5
 2a6:	fd cf       	rjmp	.-6      	; 0x2a2 <writeBytes+0x4a>
 2a8:	8a e0       	ldi	r24, 0x0A	; 10
 2aa:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	1f 91       	pop	r17
 2b4:	0f 91       	pop	r16
 2b6:	08 95       	ret

000002b8 <sendMsg>:
 2b8:	fc 01       	movw	r30, r24
 2ba:	01 90       	ld	r0, Z+
 2bc:	00 20       	and	r0, r0
 2be:	e9 f7       	brne	.-6      	; 0x2ba <sendMsg+0x2>
 2c0:	31 97       	sbiw	r30, 0x01	; 1
 2c2:	bf 01       	movw	r22, r30
 2c4:	68 1b       	sub	r22, r24
 2c6:	79 0b       	sbc	r23, r25
 2c8:	c7 cf       	rjmp	.-114    	; 0x258 <writeBytes>
 2ca:	08 95       	ret

000002cc <getMsg>:


//returns the oldest message in the buffer
void getMsg(char msg[]){
 2cc:	ac 01       	movw	r20, r24
	//there must be at least one message aviable
	if(newMessage>0){
 2ce:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <newMessage>
 2d2:	88 23       	and	r24, r24
 2d4:	99 f1       	breq	.+102    	; 0x33c <getMsg+0x70>
		newMessage--;
 2d6:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <newMessage>
 2da:	81 50       	subi	r24, 0x01	; 1
 2dc:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <newMessage>
			{
				rxReadPos = 0;
			}
		} while (msg[i++]!=FIRSTENDBYTE);*/
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 2e0:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <rxReadPos>
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	e9 5f       	subi	r30, 0xF9	; 249
 2e8:	fd 4f       	sbci	r31, 0xFD	; 253
 2ea:	80 81       	ld	r24, Z
 2ec:	8d 30       	cpi	r24, 0x0D	; 13
 2ee:	d1 f0       	breq	.+52     	; 0x324 <getMsg+0x58>
 2f0:	90 e0       	ldi	r25, 0x00	; 0
			msg[i++]=rxBuffer[rxReadPos++];
 2f2:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <rxReadPos>
 2f6:	21 e0       	ldi	r18, 0x01	; 1
 2f8:	2e 0f       	add	r18, r30
 2fa:	20 93 06 02 	sts	0x0206, r18	; 0x800206 <rxReadPos>
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	e9 5f       	subi	r30, 0xF9	; 249
 302:	fd 4f       	sbci	r31, 0xFD	; 253
 304:	20 81       	ld	r18, Z
 306:	fa 01       	movw	r30, r20
 308:	e9 0f       	add	r30, r25
 30a:	f1 1d       	adc	r31, r1
 30c:	20 83       	st	Z, r18
			
			if(rxReadPos >= RX_BUFFER_SIZE)
 30e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <rxReadPos>
			{
				rxReadPos = 0;
			}
		} while (msg[i++]!=FIRSTENDBYTE);*/
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 312:	e0 91 06 02 	lds	r30, 0x0206	; 0x800206 <rxReadPos>
			msg[i++]=rxBuffer[rxReadPos++];
 316:	9f 5f       	subi	r25, 0xFF	; 255
			{
				rxReadPos = 0;
			}
		} while (msg[i++]!=FIRSTENDBYTE);*/
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	e9 5f       	subi	r30, 0xF9	; 249
 31c:	fd 4f       	sbci	r31, 0xFD	; 253
 31e:	20 81       	ld	r18, Z
 320:	2d 30       	cpi	r18, 0x0D	; 13
 322:	39 f7       	brne	.-50     	; 0x2f2 <getMsg+0x26>
			if(rxReadPos >= RX_BUFFER_SIZE)
			{
				rxReadPos = 0;
			}
		}
		rxReadPos++;
 324:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <rxReadPos>
 328:	8f 5f       	subi	r24, 0xFF	; 255
 32a:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <rxReadPos>
		//if second endbyte is used, then move rxReadPos one forward
		if(USESECONDEDNBYTE){
			rxReadPos++;
 32e:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <rxReadPos>
 332:	8f 5f       	subi	r24, 0xFF	; 255
 334:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <rxReadPos>
			if(rxReadPos >= RX_BUFFER_SIZE)
 338:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <rxReadPos>
 33c:	08 95       	ret

0000033e <newMsgAv>:
		}
	}
}

uint8_t newMsgAv(){
	if(newMessage>0)
 33e:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <newMessage>
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	91 11       	cpse	r25, r1
 346:	01 c0       	rjmp	.+2      	; 0x34a <newMsgAv+0xc>
 348:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	else
		return 0;
}
 34a:	08 95       	ret

0000034c <__vector_25>:


//lib
ISR(USART0_RX_vect){
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	0b b6       	in	r0, 0x3b	; 59
 358:	0f 92       	push	r0
 35a:	8f 93       	push	r24
 35c:	ef 93       	push	r30
 35e:	ff 93       	push	r31
	rxBuffer[rxWritePos] = UDR0;
 360:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <rxWritePos>
 364:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 368:	f0 e0       	ldi	r31, 0x00	; 0
 36a:	e9 5f       	subi	r30, 0xF9	; 249
 36c:	fd 4f       	sbci	r31, 0xFD	; 253
 36e:	80 83       	st	Z, r24
	
	if(rxBuffer[rxWritePos]==FIRSTENDBYTE){
 370:	e0 91 05 02 	lds	r30, 0x0205	; 0x800205 <rxWritePos>
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	e9 5f       	subi	r30, 0xF9	; 249
 378:	fd 4f       	sbci	r31, 0xFD	; 253
 37a:	80 81       	ld	r24, Z
 37c:	8d 30       	cpi	r24, 0x0D	; 13
 37e:	29 f4       	brne	.+10     	; 0x38a <__vector_25+0x3e>
		newMessage++;
 380:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <newMessage>
 384:	8f 5f       	subi	r24, 0xFF	; 255
 386:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <newMessage>
	}
	
	rxWritePos++;
 38a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rxWritePos>
 38e:	8f 5f       	subi	r24, 0xFF	; 255
 390:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <rxWritePos>
	
	if(rxWritePos >= RX_BUFFER_SIZE)
 394:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <rxWritePos>
	{
		rxWritePos = 0;
	}
}
 398:	ff 91       	pop	r31
 39a:	ef 91       	pop	r30
 39c:	8f 91       	pop	r24
 39e:	0f 90       	pop	r0
 3a0:	0b be       	out	0x3b, r0	; 59
 3a2:	0f 90       	pop	r0
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	0f 90       	pop	r0
 3a8:	1f 90       	pop	r1
 3aa:	18 95       	reti

000003ac <_exit>:
 3ac:	f8 94       	cli

000003ae <__stop_program>:
 3ae:	ff cf       	rjmp	.-2      	; 0x3ae <__stop_program>
