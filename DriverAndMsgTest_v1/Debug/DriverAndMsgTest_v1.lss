
DriverAndMsgTest_v1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  00000b4e  00000be2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b4e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000403  0080022e  0080022e  00000c10  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00000cac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001729  00000000  00000000  00000de4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f6b  00000000  00000000  0000250d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009cf  00000000  00000000  00003478  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00003e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000760  00000000  00000000  00004180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088b  00000000  00000000  000048e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000516b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	23 c1       	rjmp	.+582    	; 0x28c <__vector_17>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	31 c2       	rjmp	.+1122   	; 0x4c8 <__vector_25>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e4       	ldi	r30, 0x4E	; 78
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ae 32       	cpi	r26, 0x2E	; 46
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	26 e0       	ldi	r18, 0x06	; 6
 110:	ae e2       	ldi	r26, 0x2E	; 46
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a1 33       	cpi	r26, 0x31	; 49
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	31 d0       	rcall	.+98     	; 0x182 <main>
 120:	14 c5       	rjmp	.+2600   	; 0xb4a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <getAction>:
			
		}
    }
}

void getAction(char command[], char payload[]){
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	cd b7       	in	r28, 0x3d	; 61
 136:	de b7       	in	r29, 0x3e	; 62
 138:	e2 97       	sbiw	r28, 0x32	; 50
 13a:	0f b6       	in	r0, 0x3f	; 63
 13c:	f8 94       	cli
 13e:	de bf       	out	0x3e, r29	; 62
 140:	0f be       	out	0x3f, r0	; 63
 142:	cd bf       	out	0x3d, r28	; 61
 144:	7c 01       	movw	r14, r24
 146:	6b 01       	movw	r12, r22
	char msg[50]={'\0'};
 148:	8e 01       	movw	r16, r28
 14a:	0f 5f       	subi	r16, 0xFF	; 255
 14c:	1f 4f       	sbci	r17, 0xFF	; 255
 14e:	82 e3       	ldi	r24, 0x32	; 50
 150:	f8 01       	movw	r30, r16
 152:	11 92       	st	Z+, r1
 154:	8a 95       	dec	r24
 156:	e9 f7       	brne	.-6      	; 0x152 <getAction+0x2e>
	getMsg(msg);
 158:	c8 01       	movw	r24, r16
 15a:	1f d1       	rcall	.+574    	; 0x39a <getMsg>
	parseMsg(msg, command, payload);
 15c:	a6 01       	movw	r20, r12
 15e:	b7 01       	movw	r22, r14
 160:	c8 01       	movw	r24, r16
 162:	5b d1       	rcall	.+694    	; 0x41a <parseMsg>
}
 164:	e2 96       	adiw	r28, 0x32	; 50
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	ff 90       	pop	r15
 17a:	ef 90       	pop	r14
 17c:	df 90       	pop	r13
 17e:	cf 90       	pop	r12
 180:	08 95       	ret

00000182 <main>:




int main(void)
{
 182:	cf 93       	push	r28
 184:	df 93       	push	r29
 186:	cd b7       	in	r28, 0x3d	; 61
 188:	de b7       	in	r29, 0x3e	; 62
 18a:	e2 97       	sbiw	r28, 0x32	; 50
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	f8 94       	cli
 190:	de bf       	out	0x3e, r29	; 62
 192:	0f be       	out	0x3f, r0	; 63
 194:	cd bf       	out	0x3d, r28	; 61
    //Initialize
	initUART();
 196:	86 d0       	rcall	.+268    	; 0x2a4 <initUART>
	initStepperT1();
 198:	46 d0       	rcall	.+140    	; 0x226 <initStepperT1>
 19a:	78 94       	sei
	sei();
 19c:	0f 2e       	mov	r0, r31
	
    while (1) 
    {
		if (newMsgAv())
		{
			char command[20]={'\0'};
 19e:	f4 e1       	ldi	r31, 0x14	; 20
 1a0:	cf 2e       	mov	r12, r31
 1a2:	f0 2d       	mov	r31, r0
 1a4:	8e 01       	movw	r16, r28
 1a6:	01 5e       	subi	r16, 0xE1	; 225
 1a8:	1f 4f       	sbci	r17, 0xFF	; 255
 1aa:	0f 2e       	mov	r0, r31
			char payload[30]={'\0'};
 1ac:	fe e1       	ldi	r31, 0x1E	; 30
 1ae:	df 2e       	mov	r13, r31
 1b0:	f0 2d       	mov	r31, r0
 1b2:	ce 01       	movw	r24, r28
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	7c 01       	movw	r14, r24
	sei();
	
	
    while (1) 
    {
		if (newMsgAv())
 1b8:	29 d1       	rcall	.+594    	; 0x40c <newMsgAv>
 1ba:	88 23       	and	r24, r24
 1bc:	e9 f3       	breq	.-6      	; 0x1b8 <main+0x36>
 1be:	f8 01       	movw	r30, r16
		{
			char command[20]={'\0'};
 1c0:	8c 2d       	mov	r24, r12
 1c2:	11 92       	st	Z+, r1
 1c4:	8a 95       	dec	r24
 1c6:	e9 f7       	brne	.-6      	; 0x1c2 <main+0x40>
 1c8:	f7 01       	movw	r30, r14
			char payload[30]={'\0'};
 1ca:	8d 2d       	mov	r24, r13
 1cc:	11 92       	st	Z+, r1
 1ce:	8a 95       	dec	r24
 1d0:	e9 f7       	brne	.-6      	; 0x1cc <main+0x4a>
			getAction(command, payload);	
 1d2:	b7 01       	movw	r22, r14
 1d4:	c8 01       	movw	r24, r16
 1d6:	a6 df       	rcall	.-180    	; 0x124 <getAction>
			
			if (strcmp(command, "vel")==0)
 1d8:	63 e0       	ldi	r22, 0x03	; 3
 1da:	72 e0       	ldi	r23, 0x02	; 2
 1dc:	c8 01       	movw	r24, r16
 1de:	c9 d1       	rcall	.+914    	; 0x572 <strcmp>
 1e0:	89 2b       	or	r24, r25
			{
				unsigned int val=stringToUInt(payload);
 1e2:	39 f4       	brne	.+14     	; 0x1f2 <main+0x70>
 1e4:	c7 01       	movw	r24, r14
 1e6:	5c d0       	rcall	.+184    	; 0x2a0 <stringToUInt>
				setVelocityT1(val);
 1e8:	5c 01       	movw	r10, r24
				sendUInt(val);
 1ea:	38 d0       	rcall	.+112    	; 0x25c <setVelocityT1>
 1ec:	c5 01       	movw	r24, r10
 1ee:	a9 d0       	rcall	.+338    	; 0x342 <sendUInt>
			}
			else if (strcmp(command, "start")==0)
 1f0:	e3 cf       	rjmp	.-58     	; 0x1b8 <main+0x36>
 1f2:	67 e0       	ldi	r22, 0x07	; 7
 1f4:	72 e0       	ldi	r23, 0x02	; 2
 1f6:	c8 01       	movw	r24, r16
 1f8:	bc d1       	rcall	.+888    	; 0x572 <strcmp>
 1fa:	89 2b       	or	r24, r25
			{
				startT1();
 1fc:	29 f4       	brne	.+10     	; 0x208 <main+0x86>
 1fe:	37 d0       	rcall	.+110    	; 0x26e <startT1>
				sendMsg("started");
 200:	8d e0       	ldi	r24, 0x0D	; 13
 202:	92 e0       	ldi	r25, 0x02	; 2
 204:	94 d0       	rcall	.+296    	; 0x32e <sendMsg>
			}
			else if (strcmp(command, "stop")==0)
 206:	d8 cf       	rjmp	.-80     	; 0x1b8 <main+0x36>
 208:	65 e1       	ldi	r22, 0x15	; 21
 20a:	72 e0       	ldi	r23, 0x02	; 2
 20c:	c8 01       	movw	r24, r16
 20e:	b1 d1       	rcall	.+866    	; 0x572 <strcmp>
 210:	89 2b       	or	r24, r25
			{
				stopAndClearT1();
 212:	29 f4       	brne	.+10     	; 0x21e <main+0x9c>
 214:	34 d0       	rcall	.+104    	; 0x27e <stopAndClearT1>
				sendMsg("stopped");
 216:	8a e1       	ldi	r24, 0x1A	; 26
 218:	92 e0       	ldi	r25, 0x02	; 2
 21a:	89 d0       	rcall	.+274    	; 0x32e <sendMsg>
 21c:	cd cf       	rjmp	.-102    	; 0x1b8 <main+0x36>
 21e:	82 e2       	ldi	r24, 0x22	; 34
			}
			else{
				sendMsg("ERROR");
 220:	92 e0       	ldi	r25, 0x02	; 2
 222:	85 d0       	rcall	.+266    	; 0x32e <sendMsg>
 224:	c9 cf       	rjmp	.-110    	; 0x1b8 <main+0x36>

00000226 <initStepperT1>:
 226:	e0 e8       	ldi	r30, 0x80	; 128
 228:	f0 e0       	ldi	r31, 0x00	; 0
void setVelocityT1(unsigned int vel){
	compareValueT1=vel;
	OCR1A = compareValueT1;
}

void setPrescaleT1(uint8_t scale){
 22a:	80 81       	ld	r24, Z
 22c:	80 64       	ori	r24, 0x40	; 64
 22e:	80 83       	st	Z, r24
 230:	e1 e8       	ldi	r30, 0x81	; 129
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	80 81       	ld	r24, Z
 236:	88 60       	ori	r24, 0x08	; 8
 238:	80 83       	st	Z, r24
 23a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__data_start>
 23e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__data_start+0x1>
 242:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 246:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 24a:	ef e6       	ldi	r30, 0x6F	; 111
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	82 60       	ori	r24, 0x02	; 2
 252:	80 83       	st	Z, r24
 254:	25 9a       	sbi	0x04, 5	; 4
 256:	2d 98       	cbi	0x05, 5	; 5
 258:	78 94       	sei
 25a:	08 95       	ret

0000025c <setVelocityT1>:
 25c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__data_start+0x1>
 260:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__data_start>
 264:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 268:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
 26c:	08 95       	ret

0000026e <startT1>:
	
}

void startT1(){
	TCCR1B |= prescaleT1;
 26e:	e1 e8       	ldi	r30, 0x81	; 129
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	90 81       	ld	r25, Z
 274:	80 91 02 02 	lds	r24, 0x0202	; 0x800202 <prescaleT1>
 278:	89 2b       	or	r24, r25
 27a:	80 83       	st	Z, r24
 27c:	08 95       	ret

0000027e <stopAndClearT1>:
}

void stopAndClearT1(){
	TCCR1B &= ~0x07;
 27e:	e1 e8       	ldi	r30, 0x81	; 129
 280:	f0 e0       	ldi	r31, 0x00	; 0
 282:	80 81       	ld	r24, Z
 284:	88 7f       	andi	r24, 0xF8	; 248
 286:	80 83       	st	Z, r24
	PORTB &= ~(1<<PB5); //make sure port is low
 288:	2d 98       	cbi	0x05, 5	; 5
 28a:	08 95       	ret

0000028c <__vector_17>:
}

ISR(TIMER1_COMPA_vect){
 28c:	1f 92       	push	r1
 28e:	0f 92       	push	r0
 290:	0f b6       	in	r0, 0x3f	; 63
 292:	0f 92       	push	r0
 294:	11 24       	eor	r1, r1
	
}
 296:	0f 90       	pop	r0
 298:	0f be       	out	0x3f, r0	; 63
 29a:	0f 90       	pop	r0
 29c:	1f 90       	pop	r1
 29e:	18 95       	reti

000002a0 <stringToUInt>:

/************************************************************************/
/* String to unsigned int                                               */
/************************************************************************/
unsigned int stringToUInt(char str[]){
	return atoi(str);
 2a0:	43 c1       	rjmp	.+646    	; 0x528 <atoi>
 2a2:	08 95       	ret

000002a4 <initUART>:
	char _msg[200]={'\0'};
	strcat(_msg, msg);
	strcat(_msg, "\t");
	strcat(_msg, xStr);
	sendMsg(_msg);
}
 2a4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7000c5>
 2a8:	87 e6       	ldi	r24, 0x67	; 103
 2aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7000c4>
 2ae:	82 e0       	ldi	r24, 0x02	; 2
 2b0:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7000c0>
 2b4:	86 e0       	ldi	r24, 0x06	; 6
 2b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7000c2>
 2ba:	e1 ec       	ldi	r30, 0xC1	; 193
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	80 81       	ld	r24, Z
 2c0:	88 61       	ori	r24, 0x18	; 24
 2c2:	80 83       	st	Z, r24
 2c4:	80 81       	ld	r24, Z
 2c6:	80 68       	ori	r24, 0x80	; 128
 2c8:	80 83       	st	Z, r24
 2ca:	78 94       	sei
 2cc:	08 95       	ret

000002ce <writeBytes>:
 2ce:	0f 93       	push	r16
 2d0:	1f 93       	push	r17
 2d2:	cf 93       	push	r28
 2d4:	df 93       	push	r29
 2d6:	8c 01       	movw	r16, r24
 2d8:	16 16       	cp	r1, r22
 2da:	17 06       	cpc	r1, r23
 2dc:	9c f4       	brge	.+38     	; 0x304 <writeBytes+0x36>
 2de:	20 e0       	ldi	r18, 0x00	; 0
 2e0:	e0 ec       	ldi	r30, 0xC0	; 192
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	c6 ec       	ldi	r28, 0xC6	; 198
 2e6:	d0 e0       	ldi	r29, 0x00	; 0
 2e8:	90 81       	ld	r25, Z
 2ea:	95 ff       	sbrs	r25, 5
 2ec:	fd cf       	rjmp	.-6      	; 0x2e8 <writeBytes+0x1a>
 2ee:	d8 01       	movw	r26, r16
 2f0:	a2 0f       	add	r26, r18
 2f2:	b1 1d       	adc	r27, r1
 2f4:	9c 91       	ld	r25, X
 2f6:	98 83       	st	Y, r25
 2f8:	2f 5f       	subi	r18, 0xFF	; 255
 2fa:	42 2f       	mov	r20, r18
 2fc:	50 e0       	ldi	r21, 0x00	; 0
 2fe:	46 17       	cp	r20, r22
 300:	57 07       	cpc	r21, r23
 302:	94 f3       	brlt	.-28     	; 0x2e8 <writeBytes+0x1a>
 304:	e0 ec       	ldi	r30, 0xC0	; 192
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	85 ff       	sbrs	r24, 5
 30c:	fd cf       	rjmp	.-6      	; 0x308 <writeBytes+0x3a>
 30e:	8d e0       	ldi	r24, 0x0D	; 13
 310:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 314:	e0 ec       	ldi	r30, 0xC0	; 192
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	80 81       	ld	r24, Z
 31a:	85 ff       	sbrs	r24, 5
 31c:	fd cf       	rjmp	.-6      	; 0x318 <writeBytes+0x4a>
 31e:	8a e0       	ldi	r24, 0x0A	; 10
 320:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	1f 91       	pop	r17
 32a:	0f 91       	pop	r16
 32c:	08 95       	ret

0000032e <sendMsg>:
 32e:	fc 01       	movw	r30, r24
 330:	01 90       	ld	r0, Z+
 332:	00 20       	and	r0, r0
 334:	e9 f7       	brne	.-6      	; 0x330 <sendMsg+0x2>
 336:	31 97       	sbiw	r30, 0x01	; 1
 338:	bf 01       	movw	r22, r30
 33a:	68 1b       	sub	r22, r24
 33c:	79 0b       	sbc	r23, r25
 33e:	c7 cf       	rjmp	.-114    	; 0x2ce <writeBytes>
 340:	08 95       	ret

00000342 <sendUInt>:
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	00 d0       	rcall	.+0      	; 0x34c <sendUInt+0xa>
 34c:	00 d0       	rcall	.+0      	; 0x34e <sendUInt+0xc>
 34e:	cd b7       	in	r28, 0x3d	; 61
 350:	de b7       	in	r29, 0x3e	; 62
 352:	8e 01       	movw	r16, r28
 354:	0f 5f       	subi	r16, 0xFF	; 255
 356:	1f 4f       	sbci	r17, 0xFF	; 255
 358:	26 e0       	ldi	r18, 0x06	; 6
 35a:	f8 01       	movw	r30, r16
 35c:	11 92       	st	Z+, r1
 35e:	2a 95       	dec	r18
 360:	e9 f7       	brne	.-6      	; 0x35c <sendUInt+0x1a>
 362:	9f 93       	push	r25
 364:	8f 93       	push	r24
 366:	8b e2       	ldi	r24, 0x2B	; 43
 368:	92 e0       	ldi	r25, 0x02	; 2
 36a:	9f 93       	push	r25
 36c:	8f 93       	push	r24
 36e:	1f 93       	push	r17
 370:	0f 93       	push	r16
 372:	10 d1       	rcall	.+544    	; 0x594 <sprintf>
 374:	c8 01       	movw	r24, r16
 376:	db df       	rcall	.-74     	; 0x32e <sendMsg>
 378:	0f 90       	pop	r0
 37a:	0f 90       	pop	r0
 37c:	0f 90       	pop	r0
 37e:	0f 90       	pop	r0
 380:	0f 90       	pop	r0
 382:	0f 90       	pop	r0
 384:	26 96       	adiw	r28, 0x06	; 6
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
 390:	df 91       	pop	r29
 392:	cf 91       	pop	r28
 394:	1f 91       	pop	r17
 396:	0f 91       	pop	r16
 398:	08 95       	ret

0000039a <getMsg>:


//returns the oldest message in the buffer
void getMsg(char msg[]){
 39a:	ac 01       	movw	r20, r24
	//there must be at least one message aviable
	if(newMessage>0){
 39c:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
 3a0:	88 23       	and	r24, r24
 3a2:	99 f1       	breq	.+102    	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
		newMessage--;
 3a4:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
 3a8:	81 50       	subi	r24, 0x01	; 1
 3aa:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
		uint8_t i=0;
		
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 3ae:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <rxReadPos>
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	ef 5c       	subi	r30, 0xCF	; 207
 3b6:	fd 4f       	sbci	r31, 0xFD	; 253
 3b8:	80 81       	ld	r24, Z
 3ba:	8d 30       	cpi	r24, 0x0D	; 13
 3bc:	d1 f0       	breq	.+52     	; 0x3f2 <getMsg+0x58>
 3be:	90 e0       	ldi	r25, 0x00	; 0
			msg[i++]=rxBuffer[rxReadPos++];
 3c0:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <rxReadPos>
 3c4:	21 e0       	ldi	r18, 0x01	; 1
 3c6:	2e 0f       	add	r18, r30
 3c8:	20 93 30 02 	sts	0x0230, r18	; 0x800230 <rxReadPos>
 3cc:	f0 e0       	ldi	r31, 0x00	; 0
 3ce:	ef 5c       	subi	r30, 0xCF	; 207
 3d0:	fd 4f       	sbci	r31, 0xFD	; 253
 3d2:	20 81       	ld	r18, Z
 3d4:	fa 01       	movw	r30, r20
 3d6:	e9 0f       	add	r30, r25
 3d8:	f1 1d       	adc	r31, r1
 3da:	20 83       	st	Z, r18
			
			if(rxReadPos >= RX_BUFFER_SIZE)
 3dc:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <rxReadPos>
	if(newMessage>0){
		newMessage--;
		uint8_t i=0;
		
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 3e0:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <rxReadPos>
			msg[i++]=rxBuffer[rxReadPos++];
 3e4:	9f 5f       	subi	r25, 0xFF	; 255
	if(newMessage>0){
		newMessage--;
		uint8_t i=0;
		
		
		while (rxBuffer[rxReadPos]!=FIRSTENDBYTE){
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	ef 5c       	subi	r30, 0xCF	; 207
 3ea:	fd 4f       	sbci	r31, 0xFD	; 253
 3ec:	20 81       	ld	r18, Z
 3ee:	2d 30       	cpi	r18, 0x0D	; 13
 3f0:	39 f7       	brne	.-50     	; 0x3c0 <getMsg+0x26>
			if(rxReadPos >= RX_BUFFER_SIZE)
			{
				rxReadPos = 0;
			}
		}
		rxReadPos++;
 3f2:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <rxReadPos>
 3f6:	8f 5f       	subi	r24, 0xFF	; 255
 3f8:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <rxReadPos>
		//if second endbyte is used, then move rxReadPos one forward
		if(USESECONDEDNBYTE){
			rxReadPos++;
 3fc:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <rxReadPos>
 400:	8f 5f       	subi	r24, 0xFF	; 255
 402:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <rxReadPos>
			if(rxReadPos >= RX_BUFFER_SIZE)
 406:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <rxReadPos>
 40a:	08 95       	ret

0000040c <newMsgAv>:
		}
	}
}

uint8_t newMsgAv(){
	if(newMessage>0)
 40c:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <__data_end>
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	91 11       	cpse	r25, r1
 414:	01 c0       	rjmp	.+2      	; 0x418 <newMsgAv+0xc>
 416:	80 e0       	ldi	r24, 0x00	; 0
		return 1;
	else
		return 0;
}
 418:	08 95       	ret

0000041a <parseMsg>:


void parseMsg(char msg[], char command[], char payload[]){
 41a:	bf 92       	push	r11
 41c:	cf 92       	push	r12
 41e:	df 92       	push	r13
 420:	ef 92       	push	r14
 422:	ff 92       	push	r15
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
 42c:	8c 01       	movw	r16, r24
 42e:	6b 01       	movw	r12, r22
 430:	7a 01       	movw	r14, r20
	
	uint8_t cnt=0;
	uint8_t cntCom=0;
	uint8_t cntPay=0;
	char c=msg[cnt];
 432:	fc 01       	movw	r30, r24
 434:	80 81       	ld	r24, Z
	
	//first put each char from msg to command[] until the char is = or '\r'
	while(c!='=' && c!=FIRSTENDBYTE && c!='\0'){
 436:	8d 33       	cpi	r24, 0x3D	; 61
 438:	f1 f0       	breq	.+60     	; 0x476 <parseMsg+0x5c>
 43a:	8d 30       	cpi	r24, 0x0D	; 13
 43c:	f1 f0       	breq	.+60     	; 0x47a <parseMsg+0x60>
 43e:	88 23       	and	r24, r24
 440:	f1 f0       	breq	.+60     	; 0x47e <parseMsg+0x64>
 442:	d0 e0       	ldi	r29, 0x00	; 0
 444:	c0 e0       	ldi	r28, 0x00	; 0
		if(c!='\b') //if char is '\b' then don't put in command
 446:	88 30       	cpi	r24, 0x08	; 8
 448:	51 f0       	breq	.+20     	; 0x45e <parseMsg+0x44>
			command[cntCom++]=tolower(c);//convert each char to lower case
 44a:	bb 24       	eor	r11, r11
 44c:	b3 94       	inc	r11
 44e:	bd 0e       	add	r11, r29
 450:	90 e0       	ldi	r25, 0x00	; 0
 452:	87 d0       	rcall	.+270    	; 0x562 <tolower>
 454:	f6 01       	movw	r30, r12
 456:	ed 0f       	add	r30, r29
 458:	f1 1d       	adc	r31, r1
 45a:	80 83       	st	Z, r24
 45c:	db 2d       	mov	r29, r11
		c=msg[++cnt];
 45e:	cf 5f       	subi	r28, 0xFF	; 255
 460:	f8 01       	movw	r30, r16
 462:	ec 0f       	add	r30, r28
 464:	f1 1d       	adc	r31, r1
 466:	80 81       	ld	r24, Z
	uint8_t cntCom=0;
	uint8_t cntPay=0;
	char c=msg[cnt];
	
	//first put each char from msg to command[] until the char is = or '\r'
	while(c!='=' && c!=FIRSTENDBYTE && c!='\0'){
 468:	8d 33       	cpi	r24, 0x3D	; 61
 46a:	51 f0       	breq	.+20     	; 0x480 <parseMsg+0x66>
 46c:	8d 30       	cpi	r24, 0x0D	; 13
 46e:	41 f0       	breq	.+16     	; 0x480 <parseMsg+0x66>
 470:	81 11       	cpse	r24, r1
 472:	e9 cf       	rjmp	.-46     	; 0x446 <parseMsg+0x2c>
 474:	05 c0       	rjmp	.+10     	; 0x480 <parseMsg+0x66>
}


void parseMsg(char msg[], char command[], char payload[]){
	
	uint8_t cnt=0;
 476:	c0 e0       	ldi	r28, 0x00	; 0
 478:	03 c0       	rjmp	.+6      	; 0x480 <parseMsg+0x66>
 47a:	c0 e0       	ldi	r28, 0x00	; 0
 47c:	01 c0       	rjmp	.+2      	; 0x480 <parseMsg+0x66>
 47e:	c0 e0       	ldi	r28, 0x00	; 0
		if(c!='\b') //if char is '\b' then don't put in command
			command[cntCom++]=tolower(c);//convert each char to lower case
		c=msg[++cnt];
	}
	
	c=msg[++cnt];//if c is not '\r' or end of string char '\0' then put it in payload
 480:	cf 5f       	subi	r28, 0xFF	; 255
 482:	f8 01       	movw	r30, r16
 484:	ec 0f       	add	r30, r28
 486:	f1 1d       	adc	r31, r1
 488:	80 81       	ld	r24, Z
	while(c!=FIRSTENDBYTE && c!='\0'){
 48a:	8d 30       	cpi	r24, 0x0D	; 13
 48c:	99 f0       	breq	.+38     	; 0x4b4 <parseMsg+0x9a>
 48e:	88 23       	and	r24, r24
 490:	89 f0       	breq	.+34     	; 0x4b4 <parseMsg+0x9a>
 492:	90 e0       	ldi	r25, 0x00	; 0
		if(c!='\b')
 494:	88 30       	cpi	r24, 0x08	; 8
 496:	29 f0       	breq	.+10     	; 0x4a2 <parseMsg+0x88>
			payload[cntPay++]=c;
 498:	f7 01       	movw	r30, r14
 49a:	e9 0f       	add	r30, r25
 49c:	f1 1d       	adc	r31, r1
 49e:	80 83       	st	Z, r24
 4a0:	9f 5f       	subi	r25, 0xFF	; 255
		c=msg[++cnt];
 4a2:	cf 5f       	subi	r28, 0xFF	; 255
 4a4:	f8 01       	movw	r30, r16
 4a6:	ec 0f       	add	r30, r28
 4a8:	f1 1d       	adc	r31, r1
 4aa:	80 81       	ld	r24, Z
			command[cntCom++]=tolower(c);//convert each char to lower case
		c=msg[++cnt];
	}
	
	c=msg[++cnt];//if c is not '\r' or end of string char '\0' then put it in payload
	while(c!=FIRSTENDBYTE && c!='\0'){
 4ac:	8d 30       	cpi	r24, 0x0D	; 13
 4ae:	11 f0       	breq	.+4      	; 0x4b4 <parseMsg+0x9a>
 4b0:	81 11       	cpse	r24, r1
 4b2:	f0 cf       	rjmp	.-32     	; 0x494 <parseMsg+0x7a>
		if(c!='\b')
			payload[cntPay++]=c;
		c=msg[++cnt];
	}
	
}
 4b4:	df 91       	pop	r29
 4b6:	cf 91       	pop	r28
 4b8:	1f 91       	pop	r17
 4ba:	0f 91       	pop	r16
 4bc:	ff 90       	pop	r15
 4be:	ef 90       	pop	r14
 4c0:	df 90       	pop	r13
 4c2:	cf 90       	pop	r12
 4c4:	bf 90       	pop	r11
 4c6:	08 95       	ret

000004c8 <__vector_25>:


//lib
ISR(USART0_RX_vect){
 4c8:	1f 92       	push	r1
 4ca:	0f 92       	push	r0
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	0f 92       	push	r0
 4d0:	11 24       	eor	r1, r1
 4d2:	0b b6       	in	r0, 0x3b	; 59
 4d4:	0f 92       	push	r0
 4d6:	8f 93       	push	r24
 4d8:	ef 93       	push	r30
 4da:	ff 93       	push	r31
	rxBuffer[rxWritePos] = UDR0;
 4dc:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <rxWritePos>
 4e0:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	ef 5c       	subi	r30, 0xCF	; 207
 4e8:	fd 4f       	sbci	r31, 0xFD	; 253
 4ea:	80 83       	st	Z, r24
	
	if(rxBuffer[rxWritePos]==FIRSTENDBYTE){
 4ec:	e0 91 2f 02 	lds	r30, 0x022F	; 0x80022f <rxWritePos>
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	ef 5c       	subi	r30, 0xCF	; 207
 4f4:	fd 4f       	sbci	r31, 0xFD	; 253
 4f6:	80 81       	ld	r24, Z
 4f8:	8d 30       	cpi	r24, 0x0D	; 13
 4fa:	29 f4       	brne	.+10     	; 0x506 <__vector_25+0x3e>
		newMessage++;
 4fc:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
 500:	8f 5f       	subi	r24, 0xFF	; 255
 502:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
	}
	
	rxWritePos++;
 506:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <rxWritePos>
 50a:	8f 5f       	subi	r24, 0xFF	; 255
 50c:	80 93 2f 02 	sts	0x022F, r24	; 0x80022f <rxWritePos>
	
	if(rxWritePos >= RX_BUFFER_SIZE)
 510:	80 91 2f 02 	lds	r24, 0x022F	; 0x80022f <rxWritePos>
	{
		rxWritePos = 0;
	}
}
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	8f 91       	pop	r24
 51a:	0f 90       	pop	r0
 51c:	0b be       	out	0x3b, r0	; 59
 51e:	0f 90       	pop	r0
 520:	0f be       	out	0x3f, r0	; 63
 522:	0f 90       	pop	r0
 524:	1f 90       	pop	r1
 526:	18 95       	reti

00000528 <atoi>:
 528:	fc 01       	movw	r30, r24
 52a:	88 27       	eor	r24, r24
 52c:	99 27       	eor	r25, r25
 52e:	e8 94       	clt
 530:	21 91       	ld	r18, Z+
 532:	20 32       	cpi	r18, 0x20	; 32
 534:	e9 f3       	breq	.-6      	; 0x530 <atoi+0x8>
 536:	29 30       	cpi	r18, 0x09	; 9
 538:	10 f0       	brcs	.+4      	; 0x53e <atoi+0x16>
 53a:	2e 30       	cpi	r18, 0x0E	; 14
 53c:	c8 f3       	brcs	.-14     	; 0x530 <atoi+0x8>
 53e:	2b 32       	cpi	r18, 0x2B	; 43
 540:	39 f0       	breq	.+14     	; 0x550 <atoi+0x28>
 542:	2d 32       	cpi	r18, 0x2D	; 45
 544:	31 f4       	brne	.+12     	; 0x552 <atoi+0x2a>
 546:	68 94       	set
 548:	03 c0       	rjmp	.+6      	; 0x550 <atoi+0x28>
 54a:	1c d0       	rcall	.+56     	; 0x584 <__mulhi_const_10>
 54c:	82 0f       	add	r24, r18
 54e:	91 1d       	adc	r25, r1
 550:	21 91       	ld	r18, Z+
 552:	20 53       	subi	r18, 0x30	; 48
 554:	2a 30       	cpi	r18, 0x0A	; 10
 556:	c8 f3       	brcs	.-14     	; 0x54a <atoi+0x22>
 558:	1e f4       	brtc	.+6      	; 0x560 <atoi+0x38>
 55a:	90 95       	com	r25
 55c:	81 95       	neg	r24
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	08 95       	ret

00000562 <tolower>:
 562:	91 11       	cpse	r25, r1
 564:	08 95       	ret
 566:	81 54       	subi	r24, 0x41	; 65
 568:	8a 51       	subi	r24, 0x1A	; 26
 56a:	08 f4       	brcc	.+2      	; 0x56e <tolower+0xc>
 56c:	80 5e       	subi	r24, 0xE0	; 224
 56e:	85 5a       	subi	r24, 0xA5	; 165
 570:	08 95       	ret

00000572 <strcmp>:
 572:	fb 01       	movw	r30, r22
 574:	dc 01       	movw	r26, r24
 576:	8d 91       	ld	r24, X+
 578:	01 90       	ld	r0, Z+
 57a:	80 19       	sub	r24, r0
 57c:	01 10       	cpse	r0, r1
 57e:	d9 f3       	breq	.-10     	; 0x576 <strcmp+0x4>
 580:	99 0b       	sbc	r25, r25
 582:	08 95       	ret

00000584 <__mulhi_const_10>:
 584:	7a e0       	ldi	r23, 0x0A	; 10
 586:	97 9f       	mul	r25, r23
 588:	90 2d       	mov	r25, r0
 58a:	87 9f       	mul	r24, r23
 58c:	80 2d       	mov	r24, r0
 58e:	91 0d       	add	r25, r1
 590:	11 24       	eor	r1, r1
 592:	08 95       	ret

00000594 <sprintf>:
 594:	0f 93       	push	r16
 596:	1f 93       	push	r17
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
 5a0:	2e 97       	sbiw	r28, 0x0e	; 14
 5a2:	0f b6       	in	r0, 0x3f	; 63
 5a4:	f8 94       	cli
 5a6:	de bf       	out	0x3e, r29	; 62
 5a8:	0f be       	out	0x3f, r0	; 63
 5aa:	cd bf       	out	0x3d, r28	; 61
 5ac:	0e 89       	ldd	r16, Y+22	; 0x16
 5ae:	1f 89       	ldd	r17, Y+23	; 0x17
 5b0:	86 e0       	ldi	r24, 0x06	; 6
 5b2:	8c 83       	std	Y+4, r24	; 0x04
 5b4:	1a 83       	std	Y+2, r17	; 0x02
 5b6:	09 83       	std	Y+1, r16	; 0x01
 5b8:	8f ef       	ldi	r24, 0xFF	; 255
 5ba:	9f e7       	ldi	r25, 0x7F	; 127
 5bc:	9e 83       	std	Y+6, r25	; 0x06
 5be:	8d 83       	std	Y+5, r24	; 0x05
 5c0:	ae 01       	movw	r20, r28
 5c2:	46 5e       	subi	r20, 0xE6	; 230
 5c4:	5f 4f       	sbci	r21, 0xFF	; 255
 5c6:	68 8d       	ldd	r22, Y+24	; 0x18
 5c8:	79 8d       	ldd	r23, Y+25	; 0x19
 5ca:	ce 01       	movw	r24, r28
 5cc:	01 96       	adiw	r24, 0x01	; 1
 5ce:	10 d0       	rcall	.+32     	; 0x5f0 <vfprintf>
 5d0:	ef 81       	ldd	r30, Y+7	; 0x07
 5d2:	f8 85       	ldd	r31, Y+8	; 0x08
 5d4:	e0 0f       	add	r30, r16
 5d6:	f1 1f       	adc	r31, r17
 5d8:	10 82       	st	Z, r1
 5da:	2e 96       	adiw	r28, 0x0e	; 14
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	f8 94       	cli
 5e0:	de bf       	out	0x3e, r29	; 62
 5e2:	0f be       	out	0x3f, r0	; 63
 5e4:	cd bf       	out	0x3d, r28	; 61
 5e6:	df 91       	pop	r29
 5e8:	cf 91       	pop	r28
 5ea:	1f 91       	pop	r17
 5ec:	0f 91       	pop	r16
 5ee:	08 95       	ret

000005f0 <vfprintf>:
 5f0:	2f 92       	push	r2
 5f2:	3f 92       	push	r3
 5f4:	4f 92       	push	r4
 5f6:	5f 92       	push	r5
 5f8:	6f 92       	push	r6
 5fa:	7f 92       	push	r7
 5fc:	8f 92       	push	r8
 5fe:	9f 92       	push	r9
 600:	af 92       	push	r10
 602:	bf 92       	push	r11
 604:	cf 92       	push	r12
 606:	df 92       	push	r13
 608:	ef 92       	push	r14
 60a:	ff 92       	push	r15
 60c:	0f 93       	push	r16
 60e:	1f 93       	push	r17
 610:	cf 93       	push	r28
 612:	df 93       	push	r29
 614:	cd b7       	in	r28, 0x3d	; 61
 616:	de b7       	in	r29, 0x3e	; 62
 618:	2b 97       	sbiw	r28, 0x0b	; 11
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	f8 94       	cli
 61e:	de bf       	out	0x3e, r29	; 62
 620:	0f be       	out	0x3f, r0	; 63
 622:	cd bf       	out	0x3d, r28	; 61
 624:	6c 01       	movw	r12, r24
 626:	7b 01       	movw	r14, r22
 628:	8a 01       	movw	r16, r20
 62a:	fc 01       	movw	r30, r24
 62c:	17 82       	std	Z+7, r1	; 0x07
 62e:	16 82       	std	Z+6, r1	; 0x06
 630:	83 81       	ldd	r24, Z+3	; 0x03
 632:	81 ff       	sbrs	r24, 1
 634:	bf c1       	rjmp	.+894    	; 0x9b4 <vfprintf+0x3c4>
 636:	ce 01       	movw	r24, r28
 638:	01 96       	adiw	r24, 0x01	; 1
 63a:	3c 01       	movw	r6, r24
 63c:	f6 01       	movw	r30, r12
 63e:	93 81       	ldd	r25, Z+3	; 0x03
 640:	f7 01       	movw	r30, r14
 642:	93 fd       	sbrc	r25, 3
 644:	85 91       	lpm	r24, Z+
 646:	93 ff       	sbrs	r25, 3
 648:	81 91       	ld	r24, Z+
 64a:	7f 01       	movw	r14, r30
 64c:	88 23       	and	r24, r24
 64e:	09 f4       	brne	.+2      	; 0x652 <vfprintf+0x62>
 650:	ad c1       	rjmp	.+858    	; 0x9ac <vfprintf+0x3bc>
 652:	85 32       	cpi	r24, 0x25	; 37
 654:	39 f4       	brne	.+14     	; 0x664 <vfprintf+0x74>
 656:	93 fd       	sbrc	r25, 3
 658:	85 91       	lpm	r24, Z+
 65a:	93 ff       	sbrs	r25, 3
 65c:	81 91       	ld	r24, Z+
 65e:	7f 01       	movw	r14, r30
 660:	85 32       	cpi	r24, 0x25	; 37
 662:	21 f4       	brne	.+8      	; 0x66c <vfprintf+0x7c>
 664:	b6 01       	movw	r22, r12
 666:	90 e0       	ldi	r25, 0x00	; 0
 668:	d6 d1       	rcall	.+940    	; 0xa16 <fputc>
 66a:	e8 cf       	rjmp	.-48     	; 0x63c <vfprintf+0x4c>
 66c:	91 2c       	mov	r9, r1
 66e:	21 2c       	mov	r2, r1
 670:	31 2c       	mov	r3, r1
 672:	ff e1       	ldi	r31, 0x1F	; 31
 674:	f3 15       	cp	r31, r3
 676:	d8 f0       	brcs	.+54     	; 0x6ae <vfprintf+0xbe>
 678:	8b 32       	cpi	r24, 0x2B	; 43
 67a:	79 f0       	breq	.+30     	; 0x69a <vfprintf+0xaa>
 67c:	38 f4       	brcc	.+14     	; 0x68c <vfprintf+0x9c>
 67e:	80 32       	cpi	r24, 0x20	; 32
 680:	79 f0       	breq	.+30     	; 0x6a0 <vfprintf+0xb0>
 682:	83 32       	cpi	r24, 0x23	; 35
 684:	a1 f4       	brne	.+40     	; 0x6ae <vfprintf+0xbe>
 686:	23 2d       	mov	r18, r3
 688:	20 61       	ori	r18, 0x10	; 16
 68a:	1d c0       	rjmp	.+58     	; 0x6c6 <vfprintf+0xd6>
 68c:	8d 32       	cpi	r24, 0x2D	; 45
 68e:	61 f0       	breq	.+24     	; 0x6a8 <vfprintf+0xb8>
 690:	80 33       	cpi	r24, 0x30	; 48
 692:	69 f4       	brne	.+26     	; 0x6ae <vfprintf+0xbe>
 694:	23 2d       	mov	r18, r3
 696:	21 60       	ori	r18, 0x01	; 1
 698:	16 c0       	rjmp	.+44     	; 0x6c6 <vfprintf+0xd6>
 69a:	83 2d       	mov	r24, r3
 69c:	82 60       	ori	r24, 0x02	; 2
 69e:	38 2e       	mov	r3, r24
 6a0:	e3 2d       	mov	r30, r3
 6a2:	e4 60       	ori	r30, 0x04	; 4
 6a4:	3e 2e       	mov	r3, r30
 6a6:	2a c0       	rjmp	.+84     	; 0x6fc <vfprintf+0x10c>
 6a8:	f3 2d       	mov	r31, r3
 6aa:	f8 60       	ori	r31, 0x08	; 8
 6ac:	1d c0       	rjmp	.+58     	; 0x6e8 <vfprintf+0xf8>
 6ae:	37 fc       	sbrc	r3, 7
 6b0:	2d c0       	rjmp	.+90     	; 0x70c <vfprintf+0x11c>
 6b2:	20 ed       	ldi	r18, 0xD0	; 208
 6b4:	28 0f       	add	r18, r24
 6b6:	2a 30       	cpi	r18, 0x0A	; 10
 6b8:	40 f0       	brcs	.+16     	; 0x6ca <vfprintf+0xda>
 6ba:	8e 32       	cpi	r24, 0x2E	; 46
 6bc:	b9 f4       	brne	.+46     	; 0x6ec <vfprintf+0xfc>
 6be:	36 fc       	sbrc	r3, 6
 6c0:	75 c1       	rjmp	.+746    	; 0x9ac <vfprintf+0x3bc>
 6c2:	23 2d       	mov	r18, r3
 6c4:	20 64       	ori	r18, 0x40	; 64
 6c6:	32 2e       	mov	r3, r18
 6c8:	19 c0       	rjmp	.+50     	; 0x6fc <vfprintf+0x10c>
 6ca:	36 fe       	sbrs	r3, 6
 6cc:	06 c0       	rjmp	.+12     	; 0x6da <vfprintf+0xea>
 6ce:	8a e0       	ldi	r24, 0x0A	; 10
 6d0:	98 9e       	mul	r9, r24
 6d2:	20 0d       	add	r18, r0
 6d4:	11 24       	eor	r1, r1
 6d6:	92 2e       	mov	r9, r18
 6d8:	11 c0       	rjmp	.+34     	; 0x6fc <vfprintf+0x10c>
 6da:	ea e0       	ldi	r30, 0x0A	; 10
 6dc:	2e 9e       	mul	r2, r30
 6de:	20 0d       	add	r18, r0
 6e0:	11 24       	eor	r1, r1
 6e2:	22 2e       	mov	r2, r18
 6e4:	f3 2d       	mov	r31, r3
 6e6:	f0 62       	ori	r31, 0x20	; 32
 6e8:	3f 2e       	mov	r3, r31
 6ea:	08 c0       	rjmp	.+16     	; 0x6fc <vfprintf+0x10c>
 6ec:	8c 36       	cpi	r24, 0x6C	; 108
 6ee:	21 f4       	brne	.+8      	; 0x6f8 <vfprintf+0x108>
 6f0:	83 2d       	mov	r24, r3
 6f2:	80 68       	ori	r24, 0x80	; 128
 6f4:	38 2e       	mov	r3, r24
 6f6:	02 c0       	rjmp	.+4      	; 0x6fc <vfprintf+0x10c>
 6f8:	88 36       	cpi	r24, 0x68	; 104
 6fa:	41 f4       	brne	.+16     	; 0x70c <vfprintf+0x11c>
 6fc:	f7 01       	movw	r30, r14
 6fe:	93 fd       	sbrc	r25, 3
 700:	85 91       	lpm	r24, Z+
 702:	93 ff       	sbrs	r25, 3
 704:	81 91       	ld	r24, Z+
 706:	7f 01       	movw	r14, r30
 708:	81 11       	cpse	r24, r1
 70a:	b3 cf       	rjmp	.-154    	; 0x672 <vfprintf+0x82>
 70c:	98 2f       	mov	r25, r24
 70e:	9f 7d       	andi	r25, 0xDF	; 223
 710:	95 54       	subi	r25, 0x45	; 69
 712:	93 30       	cpi	r25, 0x03	; 3
 714:	28 f4       	brcc	.+10     	; 0x720 <vfprintf+0x130>
 716:	0c 5f       	subi	r16, 0xFC	; 252
 718:	1f 4f       	sbci	r17, 0xFF	; 255
 71a:	9f e3       	ldi	r25, 0x3F	; 63
 71c:	99 83       	std	Y+1, r25	; 0x01
 71e:	0d c0       	rjmp	.+26     	; 0x73a <vfprintf+0x14a>
 720:	83 36       	cpi	r24, 0x63	; 99
 722:	31 f0       	breq	.+12     	; 0x730 <vfprintf+0x140>
 724:	83 37       	cpi	r24, 0x73	; 115
 726:	71 f0       	breq	.+28     	; 0x744 <vfprintf+0x154>
 728:	83 35       	cpi	r24, 0x53	; 83
 72a:	09 f0       	breq	.+2      	; 0x72e <vfprintf+0x13e>
 72c:	55 c0       	rjmp	.+170    	; 0x7d8 <vfprintf+0x1e8>
 72e:	20 c0       	rjmp	.+64     	; 0x770 <vfprintf+0x180>
 730:	f8 01       	movw	r30, r16
 732:	80 81       	ld	r24, Z
 734:	89 83       	std	Y+1, r24	; 0x01
 736:	0e 5f       	subi	r16, 0xFE	; 254
 738:	1f 4f       	sbci	r17, 0xFF	; 255
 73a:	88 24       	eor	r8, r8
 73c:	83 94       	inc	r8
 73e:	91 2c       	mov	r9, r1
 740:	53 01       	movw	r10, r6
 742:	12 c0       	rjmp	.+36     	; 0x768 <vfprintf+0x178>
 744:	28 01       	movw	r4, r16
 746:	f2 e0       	ldi	r31, 0x02	; 2
 748:	4f 0e       	add	r4, r31
 74a:	51 1c       	adc	r5, r1
 74c:	f8 01       	movw	r30, r16
 74e:	a0 80       	ld	r10, Z
 750:	b1 80       	ldd	r11, Z+1	; 0x01
 752:	36 fe       	sbrs	r3, 6
 754:	03 c0       	rjmp	.+6      	; 0x75c <vfprintf+0x16c>
 756:	69 2d       	mov	r22, r9
 758:	70 e0       	ldi	r23, 0x00	; 0
 75a:	02 c0       	rjmp	.+4      	; 0x760 <vfprintf+0x170>
 75c:	6f ef       	ldi	r22, 0xFF	; 255
 75e:	7f ef       	ldi	r23, 0xFF	; 255
 760:	c5 01       	movw	r24, r10
 762:	4e d1       	rcall	.+668    	; 0xa00 <strnlen>
 764:	4c 01       	movw	r8, r24
 766:	82 01       	movw	r16, r4
 768:	f3 2d       	mov	r31, r3
 76a:	ff 77       	andi	r31, 0x7F	; 127
 76c:	3f 2e       	mov	r3, r31
 76e:	15 c0       	rjmp	.+42     	; 0x79a <vfprintf+0x1aa>
 770:	28 01       	movw	r4, r16
 772:	22 e0       	ldi	r18, 0x02	; 2
 774:	42 0e       	add	r4, r18
 776:	51 1c       	adc	r5, r1
 778:	f8 01       	movw	r30, r16
 77a:	a0 80       	ld	r10, Z
 77c:	b1 80       	ldd	r11, Z+1	; 0x01
 77e:	36 fe       	sbrs	r3, 6
 780:	03 c0       	rjmp	.+6      	; 0x788 <vfprintf+0x198>
 782:	69 2d       	mov	r22, r9
 784:	70 e0       	ldi	r23, 0x00	; 0
 786:	02 c0       	rjmp	.+4      	; 0x78c <vfprintf+0x19c>
 788:	6f ef       	ldi	r22, 0xFF	; 255
 78a:	7f ef       	ldi	r23, 0xFF	; 255
 78c:	c5 01       	movw	r24, r10
 78e:	2d d1       	rcall	.+602    	; 0x9ea <strnlen_P>
 790:	4c 01       	movw	r8, r24
 792:	f3 2d       	mov	r31, r3
 794:	f0 68       	ori	r31, 0x80	; 128
 796:	3f 2e       	mov	r3, r31
 798:	82 01       	movw	r16, r4
 79a:	33 fc       	sbrc	r3, 3
 79c:	19 c0       	rjmp	.+50     	; 0x7d0 <vfprintf+0x1e0>
 79e:	82 2d       	mov	r24, r2
 7a0:	90 e0       	ldi	r25, 0x00	; 0
 7a2:	88 16       	cp	r8, r24
 7a4:	99 06       	cpc	r9, r25
 7a6:	a0 f4       	brcc	.+40     	; 0x7d0 <vfprintf+0x1e0>
 7a8:	b6 01       	movw	r22, r12
 7aa:	80 e2       	ldi	r24, 0x20	; 32
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	33 d1       	rcall	.+614    	; 0xa16 <fputc>
 7b0:	2a 94       	dec	r2
 7b2:	f5 cf       	rjmp	.-22     	; 0x79e <vfprintf+0x1ae>
 7b4:	f5 01       	movw	r30, r10
 7b6:	37 fc       	sbrc	r3, 7
 7b8:	85 91       	lpm	r24, Z+
 7ba:	37 fe       	sbrs	r3, 7
 7bc:	81 91       	ld	r24, Z+
 7be:	5f 01       	movw	r10, r30
 7c0:	b6 01       	movw	r22, r12
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	28 d1       	rcall	.+592    	; 0xa16 <fputc>
 7c6:	21 10       	cpse	r2, r1
 7c8:	2a 94       	dec	r2
 7ca:	21 e0       	ldi	r18, 0x01	; 1
 7cc:	82 1a       	sub	r8, r18
 7ce:	91 08       	sbc	r9, r1
 7d0:	81 14       	cp	r8, r1
 7d2:	91 04       	cpc	r9, r1
 7d4:	79 f7       	brne	.-34     	; 0x7b4 <vfprintf+0x1c4>
 7d6:	e1 c0       	rjmp	.+450    	; 0x99a <vfprintf+0x3aa>
 7d8:	84 36       	cpi	r24, 0x64	; 100
 7da:	11 f0       	breq	.+4      	; 0x7e0 <vfprintf+0x1f0>
 7dc:	89 36       	cpi	r24, 0x69	; 105
 7de:	39 f5       	brne	.+78     	; 0x82e <vfprintf+0x23e>
 7e0:	f8 01       	movw	r30, r16
 7e2:	37 fe       	sbrs	r3, 7
 7e4:	07 c0       	rjmp	.+14     	; 0x7f4 <vfprintf+0x204>
 7e6:	60 81       	ld	r22, Z
 7e8:	71 81       	ldd	r23, Z+1	; 0x01
 7ea:	82 81       	ldd	r24, Z+2	; 0x02
 7ec:	93 81       	ldd	r25, Z+3	; 0x03
 7ee:	0c 5f       	subi	r16, 0xFC	; 252
 7f0:	1f 4f       	sbci	r17, 0xFF	; 255
 7f2:	08 c0       	rjmp	.+16     	; 0x804 <vfprintf+0x214>
 7f4:	60 81       	ld	r22, Z
 7f6:	71 81       	ldd	r23, Z+1	; 0x01
 7f8:	07 2e       	mov	r0, r23
 7fa:	00 0c       	add	r0, r0
 7fc:	88 0b       	sbc	r24, r24
 7fe:	99 0b       	sbc	r25, r25
 800:	0e 5f       	subi	r16, 0xFE	; 254
 802:	1f 4f       	sbci	r17, 0xFF	; 255
 804:	f3 2d       	mov	r31, r3
 806:	ff 76       	andi	r31, 0x6F	; 111
 808:	3f 2e       	mov	r3, r31
 80a:	97 ff       	sbrs	r25, 7
 80c:	09 c0       	rjmp	.+18     	; 0x820 <vfprintf+0x230>
 80e:	90 95       	com	r25
 810:	80 95       	com	r24
 812:	70 95       	com	r23
 814:	61 95       	neg	r22
 816:	7f 4f       	sbci	r23, 0xFF	; 255
 818:	8f 4f       	sbci	r24, 0xFF	; 255
 81a:	9f 4f       	sbci	r25, 0xFF	; 255
 81c:	f0 68       	ori	r31, 0x80	; 128
 81e:	3f 2e       	mov	r3, r31
 820:	2a e0       	ldi	r18, 0x0A	; 10
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	a3 01       	movw	r20, r6
 826:	33 d1       	rcall	.+614    	; 0xa8e <__ultoa_invert>
 828:	88 2e       	mov	r8, r24
 82a:	86 18       	sub	r8, r6
 82c:	44 c0       	rjmp	.+136    	; 0x8b6 <vfprintf+0x2c6>
 82e:	85 37       	cpi	r24, 0x75	; 117
 830:	31 f4       	brne	.+12     	; 0x83e <vfprintf+0x24e>
 832:	23 2d       	mov	r18, r3
 834:	2f 7e       	andi	r18, 0xEF	; 239
 836:	b2 2e       	mov	r11, r18
 838:	2a e0       	ldi	r18, 0x0A	; 10
 83a:	30 e0       	ldi	r19, 0x00	; 0
 83c:	25 c0       	rjmp	.+74     	; 0x888 <vfprintf+0x298>
 83e:	93 2d       	mov	r25, r3
 840:	99 7f       	andi	r25, 0xF9	; 249
 842:	b9 2e       	mov	r11, r25
 844:	8f 36       	cpi	r24, 0x6F	; 111
 846:	c1 f0       	breq	.+48     	; 0x878 <vfprintf+0x288>
 848:	18 f4       	brcc	.+6      	; 0x850 <vfprintf+0x260>
 84a:	88 35       	cpi	r24, 0x58	; 88
 84c:	79 f0       	breq	.+30     	; 0x86c <vfprintf+0x27c>
 84e:	ae c0       	rjmp	.+348    	; 0x9ac <vfprintf+0x3bc>
 850:	80 37       	cpi	r24, 0x70	; 112
 852:	19 f0       	breq	.+6      	; 0x85a <vfprintf+0x26a>
 854:	88 37       	cpi	r24, 0x78	; 120
 856:	21 f0       	breq	.+8      	; 0x860 <vfprintf+0x270>
 858:	a9 c0       	rjmp	.+338    	; 0x9ac <vfprintf+0x3bc>
 85a:	e9 2f       	mov	r30, r25
 85c:	e0 61       	ori	r30, 0x10	; 16
 85e:	be 2e       	mov	r11, r30
 860:	b4 fe       	sbrs	r11, 4
 862:	0d c0       	rjmp	.+26     	; 0x87e <vfprintf+0x28e>
 864:	fb 2d       	mov	r31, r11
 866:	f4 60       	ori	r31, 0x04	; 4
 868:	bf 2e       	mov	r11, r31
 86a:	09 c0       	rjmp	.+18     	; 0x87e <vfprintf+0x28e>
 86c:	34 fe       	sbrs	r3, 4
 86e:	0a c0       	rjmp	.+20     	; 0x884 <vfprintf+0x294>
 870:	29 2f       	mov	r18, r25
 872:	26 60       	ori	r18, 0x06	; 6
 874:	b2 2e       	mov	r11, r18
 876:	06 c0       	rjmp	.+12     	; 0x884 <vfprintf+0x294>
 878:	28 e0       	ldi	r18, 0x08	; 8
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	05 c0       	rjmp	.+10     	; 0x888 <vfprintf+0x298>
 87e:	20 e1       	ldi	r18, 0x10	; 16
 880:	30 e0       	ldi	r19, 0x00	; 0
 882:	02 c0       	rjmp	.+4      	; 0x888 <vfprintf+0x298>
 884:	20 e1       	ldi	r18, 0x10	; 16
 886:	32 e0       	ldi	r19, 0x02	; 2
 888:	f8 01       	movw	r30, r16
 88a:	b7 fe       	sbrs	r11, 7
 88c:	07 c0       	rjmp	.+14     	; 0x89c <vfprintf+0x2ac>
 88e:	60 81       	ld	r22, Z
 890:	71 81       	ldd	r23, Z+1	; 0x01
 892:	82 81       	ldd	r24, Z+2	; 0x02
 894:	93 81       	ldd	r25, Z+3	; 0x03
 896:	0c 5f       	subi	r16, 0xFC	; 252
 898:	1f 4f       	sbci	r17, 0xFF	; 255
 89a:	06 c0       	rjmp	.+12     	; 0x8a8 <vfprintf+0x2b8>
 89c:	60 81       	ld	r22, Z
 89e:	71 81       	ldd	r23, Z+1	; 0x01
 8a0:	80 e0       	ldi	r24, 0x00	; 0
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	0e 5f       	subi	r16, 0xFE	; 254
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	a3 01       	movw	r20, r6
 8aa:	f1 d0       	rcall	.+482    	; 0xa8e <__ultoa_invert>
 8ac:	88 2e       	mov	r8, r24
 8ae:	86 18       	sub	r8, r6
 8b0:	fb 2d       	mov	r31, r11
 8b2:	ff 77       	andi	r31, 0x7F	; 127
 8b4:	3f 2e       	mov	r3, r31
 8b6:	36 fe       	sbrs	r3, 6
 8b8:	0d c0       	rjmp	.+26     	; 0x8d4 <vfprintf+0x2e4>
 8ba:	23 2d       	mov	r18, r3
 8bc:	2e 7f       	andi	r18, 0xFE	; 254
 8be:	a2 2e       	mov	r10, r18
 8c0:	89 14       	cp	r8, r9
 8c2:	58 f4       	brcc	.+22     	; 0x8da <vfprintf+0x2ea>
 8c4:	34 fe       	sbrs	r3, 4
 8c6:	0b c0       	rjmp	.+22     	; 0x8de <vfprintf+0x2ee>
 8c8:	32 fc       	sbrc	r3, 2
 8ca:	09 c0       	rjmp	.+18     	; 0x8de <vfprintf+0x2ee>
 8cc:	83 2d       	mov	r24, r3
 8ce:	8e 7e       	andi	r24, 0xEE	; 238
 8d0:	a8 2e       	mov	r10, r24
 8d2:	05 c0       	rjmp	.+10     	; 0x8de <vfprintf+0x2ee>
 8d4:	b8 2c       	mov	r11, r8
 8d6:	a3 2c       	mov	r10, r3
 8d8:	03 c0       	rjmp	.+6      	; 0x8e0 <vfprintf+0x2f0>
 8da:	b8 2c       	mov	r11, r8
 8dc:	01 c0       	rjmp	.+2      	; 0x8e0 <vfprintf+0x2f0>
 8de:	b9 2c       	mov	r11, r9
 8e0:	a4 fe       	sbrs	r10, 4
 8e2:	0f c0       	rjmp	.+30     	; 0x902 <vfprintf+0x312>
 8e4:	fe 01       	movw	r30, r28
 8e6:	e8 0d       	add	r30, r8
 8e8:	f1 1d       	adc	r31, r1
 8ea:	80 81       	ld	r24, Z
 8ec:	80 33       	cpi	r24, 0x30	; 48
 8ee:	21 f4       	brne	.+8      	; 0x8f8 <vfprintf+0x308>
 8f0:	9a 2d       	mov	r25, r10
 8f2:	99 7e       	andi	r25, 0xE9	; 233
 8f4:	a9 2e       	mov	r10, r25
 8f6:	09 c0       	rjmp	.+18     	; 0x90a <vfprintf+0x31a>
 8f8:	a2 fe       	sbrs	r10, 2
 8fa:	06 c0       	rjmp	.+12     	; 0x908 <vfprintf+0x318>
 8fc:	b3 94       	inc	r11
 8fe:	b3 94       	inc	r11
 900:	04 c0       	rjmp	.+8      	; 0x90a <vfprintf+0x31a>
 902:	8a 2d       	mov	r24, r10
 904:	86 78       	andi	r24, 0x86	; 134
 906:	09 f0       	breq	.+2      	; 0x90a <vfprintf+0x31a>
 908:	b3 94       	inc	r11
 90a:	a3 fc       	sbrc	r10, 3
 90c:	10 c0       	rjmp	.+32     	; 0x92e <vfprintf+0x33e>
 90e:	a0 fe       	sbrs	r10, 0
 910:	06 c0       	rjmp	.+12     	; 0x91e <vfprintf+0x32e>
 912:	b2 14       	cp	r11, r2
 914:	80 f4       	brcc	.+32     	; 0x936 <vfprintf+0x346>
 916:	28 0c       	add	r2, r8
 918:	92 2c       	mov	r9, r2
 91a:	9b 18       	sub	r9, r11
 91c:	0d c0       	rjmp	.+26     	; 0x938 <vfprintf+0x348>
 91e:	b2 14       	cp	r11, r2
 920:	58 f4       	brcc	.+22     	; 0x938 <vfprintf+0x348>
 922:	b6 01       	movw	r22, r12
 924:	80 e2       	ldi	r24, 0x20	; 32
 926:	90 e0       	ldi	r25, 0x00	; 0
 928:	76 d0       	rcall	.+236    	; 0xa16 <fputc>
 92a:	b3 94       	inc	r11
 92c:	f8 cf       	rjmp	.-16     	; 0x91e <vfprintf+0x32e>
 92e:	b2 14       	cp	r11, r2
 930:	18 f4       	brcc	.+6      	; 0x938 <vfprintf+0x348>
 932:	2b 18       	sub	r2, r11
 934:	02 c0       	rjmp	.+4      	; 0x93a <vfprintf+0x34a>
 936:	98 2c       	mov	r9, r8
 938:	21 2c       	mov	r2, r1
 93a:	a4 fe       	sbrs	r10, 4
 93c:	0f c0       	rjmp	.+30     	; 0x95c <vfprintf+0x36c>
 93e:	b6 01       	movw	r22, r12
 940:	80 e3       	ldi	r24, 0x30	; 48
 942:	90 e0       	ldi	r25, 0x00	; 0
 944:	68 d0       	rcall	.+208    	; 0xa16 <fputc>
 946:	a2 fe       	sbrs	r10, 2
 948:	16 c0       	rjmp	.+44     	; 0x976 <vfprintf+0x386>
 94a:	a1 fc       	sbrc	r10, 1
 94c:	03 c0       	rjmp	.+6      	; 0x954 <vfprintf+0x364>
 94e:	88 e7       	ldi	r24, 0x78	; 120
 950:	90 e0       	ldi	r25, 0x00	; 0
 952:	02 c0       	rjmp	.+4      	; 0x958 <vfprintf+0x368>
 954:	88 e5       	ldi	r24, 0x58	; 88
 956:	90 e0       	ldi	r25, 0x00	; 0
 958:	b6 01       	movw	r22, r12
 95a:	0c c0       	rjmp	.+24     	; 0x974 <vfprintf+0x384>
 95c:	8a 2d       	mov	r24, r10
 95e:	86 78       	andi	r24, 0x86	; 134
 960:	51 f0       	breq	.+20     	; 0x976 <vfprintf+0x386>
 962:	a1 fe       	sbrs	r10, 1
 964:	02 c0       	rjmp	.+4      	; 0x96a <vfprintf+0x37a>
 966:	8b e2       	ldi	r24, 0x2B	; 43
 968:	01 c0       	rjmp	.+2      	; 0x96c <vfprintf+0x37c>
 96a:	80 e2       	ldi	r24, 0x20	; 32
 96c:	a7 fc       	sbrc	r10, 7
 96e:	8d e2       	ldi	r24, 0x2D	; 45
 970:	b6 01       	movw	r22, r12
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	50 d0       	rcall	.+160    	; 0xa16 <fputc>
 976:	89 14       	cp	r8, r9
 978:	30 f4       	brcc	.+12     	; 0x986 <vfprintf+0x396>
 97a:	b6 01       	movw	r22, r12
 97c:	80 e3       	ldi	r24, 0x30	; 48
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	4a d0       	rcall	.+148    	; 0xa16 <fputc>
 982:	9a 94       	dec	r9
 984:	f8 cf       	rjmp	.-16     	; 0x976 <vfprintf+0x386>
 986:	8a 94       	dec	r8
 988:	f3 01       	movw	r30, r6
 98a:	e8 0d       	add	r30, r8
 98c:	f1 1d       	adc	r31, r1
 98e:	80 81       	ld	r24, Z
 990:	b6 01       	movw	r22, r12
 992:	90 e0       	ldi	r25, 0x00	; 0
 994:	40 d0       	rcall	.+128    	; 0xa16 <fputc>
 996:	81 10       	cpse	r8, r1
 998:	f6 cf       	rjmp	.-20     	; 0x986 <vfprintf+0x396>
 99a:	22 20       	and	r2, r2
 99c:	09 f4       	brne	.+2      	; 0x9a0 <vfprintf+0x3b0>
 99e:	4e ce       	rjmp	.-868    	; 0x63c <vfprintf+0x4c>
 9a0:	b6 01       	movw	r22, r12
 9a2:	80 e2       	ldi	r24, 0x20	; 32
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	37 d0       	rcall	.+110    	; 0xa16 <fputc>
 9a8:	2a 94       	dec	r2
 9aa:	f7 cf       	rjmp	.-18     	; 0x99a <vfprintf+0x3aa>
 9ac:	f6 01       	movw	r30, r12
 9ae:	86 81       	ldd	r24, Z+6	; 0x06
 9b0:	97 81       	ldd	r25, Z+7	; 0x07
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <vfprintf+0x3c8>
 9b4:	8f ef       	ldi	r24, 0xFF	; 255
 9b6:	9f ef       	ldi	r25, 0xFF	; 255
 9b8:	2b 96       	adiw	r28, 0x0b	; 11
 9ba:	0f b6       	in	r0, 0x3f	; 63
 9bc:	f8 94       	cli
 9be:	de bf       	out	0x3e, r29	; 62
 9c0:	0f be       	out	0x3f, r0	; 63
 9c2:	cd bf       	out	0x3d, r28	; 61
 9c4:	df 91       	pop	r29
 9c6:	cf 91       	pop	r28
 9c8:	1f 91       	pop	r17
 9ca:	0f 91       	pop	r16
 9cc:	ff 90       	pop	r15
 9ce:	ef 90       	pop	r14
 9d0:	df 90       	pop	r13
 9d2:	cf 90       	pop	r12
 9d4:	bf 90       	pop	r11
 9d6:	af 90       	pop	r10
 9d8:	9f 90       	pop	r9
 9da:	8f 90       	pop	r8
 9dc:	7f 90       	pop	r7
 9de:	6f 90       	pop	r6
 9e0:	5f 90       	pop	r5
 9e2:	4f 90       	pop	r4
 9e4:	3f 90       	pop	r3
 9e6:	2f 90       	pop	r2
 9e8:	08 95       	ret

000009ea <strnlen_P>:
 9ea:	fc 01       	movw	r30, r24
 9ec:	05 90       	lpm	r0, Z+
 9ee:	61 50       	subi	r22, 0x01	; 1
 9f0:	70 40       	sbci	r23, 0x00	; 0
 9f2:	01 10       	cpse	r0, r1
 9f4:	d8 f7       	brcc	.-10     	; 0x9ec <strnlen_P+0x2>
 9f6:	80 95       	com	r24
 9f8:	90 95       	com	r25
 9fa:	8e 0f       	add	r24, r30
 9fc:	9f 1f       	adc	r25, r31
 9fe:	08 95       	ret

00000a00 <strnlen>:
 a00:	fc 01       	movw	r30, r24
 a02:	61 50       	subi	r22, 0x01	; 1
 a04:	70 40       	sbci	r23, 0x00	; 0
 a06:	01 90       	ld	r0, Z+
 a08:	01 10       	cpse	r0, r1
 a0a:	d8 f7       	brcc	.-10     	; 0xa02 <strnlen+0x2>
 a0c:	80 95       	com	r24
 a0e:	90 95       	com	r25
 a10:	8e 0f       	add	r24, r30
 a12:	9f 1f       	adc	r25, r31
 a14:	08 95       	ret

00000a16 <fputc>:
 a16:	0f 93       	push	r16
 a18:	1f 93       	push	r17
 a1a:	cf 93       	push	r28
 a1c:	df 93       	push	r29
 a1e:	fb 01       	movw	r30, r22
 a20:	23 81       	ldd	r18, Z+3	; 0x03
 a22:	21 fd       	sbrc	r18, 1
 a24:	03 c0       	rjmp	.+6      	; 0xa2c <fputc+0x16>
 a26:	8f ef       	ldi	r24, 0xFF	; 255
 a28:	9f ef       	ldi	r25, 0xFF	; 255
 a2a:	2c c0       	rjmp	.+88     	; 0xa84 <fputc+0x6e>
 a2c:	22 ff       	sbrs	r18, 2
 a2e:	16 c0       	rjmp	.+44     	; 0xa5c <fputc+0x46>
 a30:	46 81       	ldd	r20, Z+6	; 0x06
 a32:	57 81       	ldd	r21, Z+7	; 0x07
 a34:	24 81       	ldd	r18, Z+4	; 0x04
 a36:	35 81       	ldd	r19, Z+5	; 0x05
 a38:	42 17       	cp	r20, r18
 a3a:	53 07       	cpc	r21, r19
 a3c:	44 f4       	brge	.+16     	; 0xa4e <fputc+0x38>
 a3e:	a0 81       	ld	r26, Z
 a40:	b1 81       	ldd	r27, Z+1	; 0x01
 a42:	9d 01       	movw	r18, r26
 a44:	2f 5f       	subi	r18, 0xFF	; 255
 a46:	3f 4f       	sbci	r19, 0xFF	; 255
 a48:	31 83       	std	Z+1, r19	; 0x01
 a4a:	20 83       	st	Z, r18
 a4c:	8c 93       	st	X, r24
 a4e:	26 81       	ldd	r18, Z+6	; 0x06
 a50:	37 81       	ldd	r19, Z+7	; 0x07
 a52:	2f 5f       	subi	r18, 0xFF	; 255
 a54:	3f 4f       	sbci	r19, 0xFF	; 255
 a56:	37 83       	std	Z+7, r19	; 0x07
 a58:	26 83       	std	Z+6, r18	; 0x06
 a5a:	14 c0       	rjmp	.+40     	; 0xa84 <fputc+0x6e>
 a5c:	8b 01       	movw	r16, r22
 a5e:	ec 01       	movw	r28, r24
 a60:	fb 01       	movw	r30, r22
 a62:	00 84       	ldd	r0, Z+8	; 0x08
 a64:	f1 85       	ldd	r31, Z+9	; 0x09
 a66:	e0 2d       	mov	r30, r0
 a68:	19 95       	eicall
 a6a:	89 2b       	or	r24, r25
 a6c:	e1 f6       	brne	.-72     	; 0xa26 <fputc+0x10>
 a6e:	d8 01       	movw	r26, r16
 a70:	16 96       	adiw	r26, 0x06	; 6
 a72:	8d 91       	ld	r24, X+
 a74:	9c 91       	ld	r25, X
 a76:	17 97       	sbiw	r26, 0x07	; 7
 a78:	01 96       	adiw	r24, 0x01	; 1
 a7a:	17 96       	adiw	r26, 0x07	; 7
 a7c:	9c 93       	st	X, r25
 a7e:	8e 93       	st	-X, r24
 a80:	16 97       	sbiw	r26, 0x06	; 6
 a82:	ce 01       	movw	r24, r28
 a84:	df 91       	pop	r29
 a86:	cf 91       	pop	r28
 a88:	1f 91       	pop	r17
 a8a:	0f 91       	pop	r16
 a8c:	08 95       	ret

00000a8e <__ultoa_invert>:
 a8e:	fa 01       	movw	r30, r20
 a90:	aa 27       	eor	r26, r26
 a92:	28 30       	cpi	r18, 0x08	; 8
 a94:	51 f1       	breq	.+84     	; 0xaea <__ultoa_invert+0x5c>
 a96:	20 31       	cpi	r18, 0x10	; 16
 a98:	81 f1       	breq	.+96     	; 0xafa <__ultoa_invert+0x6c>
 a9a:	e8 94       	clt
 a9c:	6f 93       	push	r22
 a9e:	6e 7f       	andi	r22, 0xFE	; 254
 aa0:	6e 5f       	subi	r22, 0xFE	; 254
 aa2:	7f 4f       	sbci	r23, 0xFF	; 255
 aa4:	8f 4f       	sbci	r24, 0xFF	; 255
 aa6:	9f 4f       	sbci	r25, 0xFF	; 255
 aa8:	af 4f       	sbci	r26, 0xFF	; 255
 aaa:	b1 e0       	ldi	r27, 0x01	; 1
 aac:	3e d0       	rcall	.+124    	; 0xb2a <__ultoa_invert+0x9c>
 aae:	b4 e0       	ldi	r27, 0x04	; 4
 ab0:	3c d0       	rcall	.+120    	; 0xb2a <__ultoa_invert+0x9c>
 ab2:	67 0f       	add	r22, r23
 ab4:	78 1f       	adc	r23, r24
 ab6:	89 1f       	adc	r24, r25
 ab8:	9a 1f       	adc	r25, r26
 aba:	a1 1d       	adc	r26, r1
 abc:	68 0f       	add	r22, r24
 abe:	79 1f       	adc	r23, r25
 ac0:	8a 1f       	adc	r24, r26
 ac2:	91 1d       	adc	r25, r1
 ac4:	a1 1d       	adc	r26, r1
 ac6:	6a 0f       	add	r22, r26
 ac8:	71 1d       	adc	r23, r1
 aca:	81 1d       	adc	r24, r1
 acc:	91 1d       	adc	r25, r1
 ace:	a1 1d       	adc	r26, r1
 ad0:	20 d0       	rcall	.+64     	; 0xb12 <__ultoa_invert+0x84>
 ad2:	09 f4       	brne	.+2      	; 0xad6 <__ultoa_invert+0x48>
 ad4:	68 94       	set
 ad6:	3f 91       	pop	r19
 ad8:	2a e0       	ldi	r18, 0x0A	; 10
 ada:	26 9f       	mul	r18, r22
 adc:	11 24       	eor	r1, r1
 ade:	30 19       	sub	r19, r0
 ae0:	30 5d       	subi	r19, 0xD0	; 208
 ae2:	31 93       	st	Z+, r19
 ae4:	de f6       	brtc	.-74     	; 0xa9c <__ultoa_invert+0xe>
 ae6:	cf 01       	movw	r24, r30
 ae8:	08 95       	ret
 aea:	46 2f       	mov	r20, r22
 aec:	47 70       	andi	r20, 0x07	; 7
 aee:	40 5d       	subi	r20, 0xD0	; 208
 af0:	41 93       	st	Z+, r20
 af2:	b3 e0       	ldi	r27, 0x03	; 3
 af4:	0f d0       	rcall	.+30     	; 0xb14 <__ultoa_invert+0x86>
 af6:	c9 f7       	brne	.-14     	; 0xaea <__ultoa_invert+0x5c>
 af8:	f6 cf       	rjmp	.-20     	; 0xae6 <__ultoa_invert+0x58>
 afa:	46 2f       	mov	r20, r22
 afc:	4f 70       	andi	r20, 0x0F	; 15
 afe:	40 5d       	subi	r20, 0xD0	; 208
 b00:	4a 33       	cpi	r20, 0x3A	; 58
 b02:	18 f0       	brcs	.+6      	; 0xb0a <__ultoa_invert+0x7c>
 b04:	49 5d       	subi	r20, 0xD9	; 217
 b06:	31 fd       	sbrc	r19, 1
 b08:	40 52       	subi	r20, 0x20	; 32
 b0a:	41 93       	st	Z+, r20
 b0c:	02 d0       	rcall	.+4      	; 0xb12 <__ultoa_invert+0x84>
 b0e:	a9 f7       	brne	.-22     	; 0xafa <__ultoa_invert+0x6c>
 b10:	ea cf       	rjmp	.-44     	; 0xae6 <__ultoa_invert+0x58>
 b12:	b4 e0       	ldi	r27, 0x04	; 4
 b14:	a6 95       	lsr	r26
 b16:	97 95       	ror	r25
 b18:	87 95       	ror	r24
 b1a:	77 95       	ror	r23
 b1c:	67 95       	ror	r22
 b1e:	ba 95       	dec	r27
 b20:	c9 f7       	brne	.-14     	; 0xb14 <__ultoa_invert+0x86>
 b22:	00 97       	sbiw	r24, 0x00	; 0
 b24:	61 05       	cpc	r22, r1
 b26:	71 05       	cpc	r23, r1
 b28:	08 95       	ret
 b2a:	9b 01       	movw	r18, r22
 b2c:	ac 01       	movw	r20, r24
 b2e:	0a 2e       	mov	r0, r26
 b30:	06 94       	lsr	r0
 b32:	57 95       	ror	r21
 b34:	47 95       	ror	r20
 b36:	37 95       	ror	r19
 b38:	27 95       	ror	r18
 b3a:	ba 95       	dec	r27
 b3c:	c9 f7       	brne	.-14     	; 0xb30 <__ultoa_invert+0xa2>
 b3e:	62 0f       	add	r22, r18
 b40:	73 1f       	adc	r23, r19
 b42:	84 1f       	adc	r24, r20
 b44:	95 1f       	adc	r25, r21
 b46:	a0 1d       	adc	r26, r0
 b48:	08 95       	ret

00000b4a <_exit>:
 b4a:	f8 94       	cli

00000b4c <__stop_program>:
 b4c:	ff cf       	rjmp	.-2      	; 0xb4c <__stop_program>
